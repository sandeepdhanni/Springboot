In a Spring Boot application, you can use the **Spring Scheduler** to run tasks at scheduled intervals. The `@Scheduled` annotation is used to execute methods at fixed rates or intervals. Let’s take an example of a simple Spring Boot application where we will schedule a task that prints a message to the console every few seconds.

### **Steps for Using the Spring Scheduler in Spring Boot:**

1. **Add Dependencies**:
   Make sure to include the `spring-boot-starter` in your `pom.xml` if you're using Maven.

   ```xml
   <dependencies>
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter</artifactId>
       </dependency>
       <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-web</artifactId>
       </dependency>
   </dependencies>
   ```

2. **Enable Scheduling**:
   In Spring Boot, scheduling is not enabled by default. To enable scheduling, you need to add the `@EnableScheduling` annotation to one of your configuration classes (e.g., the main application class).

3. **Create a Scheduled Task**:
   Create a service that contains a method annotated with `@Scheduled` to run at a fixed interval or cron expression.

---

### **Complete Example**:

#### **1. Main Application Class (Spring Boot)**

```java
package com.example.scheduledtask;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling // Enable scheduling in the application
public class ScheduledTaskApplication {
    public static void main(String[] args) {
        SpringApplication.run(ScheduledTaskApplication.class, args);
    }
}
```

#### **2. Scheduled Task Service**

```java
package com.example.scheduledtask;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class TaskService {

    // This method will be scheduled to run every 5 seconds
    @Scheduled(fixedRate = 5000)
    public void printMessage() {
        System.out.println("Hello! This message is printed every 5 seconds.");
    }

    // This method will run every minute at the 30th second
    @Scheduled(cron = "30 * * * * *")
    public void printCronMessage() {
        System.out.println("Cron job: This runs every minute at the 30th second.");
    }

    // This method runs once after the application has started, after a 10-second delay
    @Scheduled(initialDelay = 10000, fixedRate = 5000)
    public void startAfterDelay() {
        System.out.println("This message starts after a 10-second delay and then runs every 5 seconds.");
    }
}
```

#### **3. `application.properties` (Optional)**

You can configure various settings related to the scheduler. For example, you can specify the pool size or adjust the thread settings:

```properties
# Configure task scheduler thread pool size
spring.task.scheduling.pool.size=2
```

#### **4. Running the Application**

- Once the application starts, the methods in `TaskService` will execute at their scheduled times.
- The `printMessage()` method will run every 5 seconds.
- The `printCronMessage()` method will run every minute at the 30th second.
- The `startAfterDelay()` method will start 10 seconds after the application starts and then repeat every 5 seconds.

#### **5. Expected Output in Console**

When you run the application, you should see output like:

```
Hello! This message is printed every 5 seconds.
Cron job: This runs every minute at the 30th second.
Hello! This message is printed every 5 seconds.
Cron job: This runs every minute at the 30th second.
Hello! This message is printed every 5 seconds.
```

---

### **Different Ways to Schedule Tasks**:
1. **Fixed Rate**: 
   The task is executed at a fixed interval, starting from the last completion (not from the previous start time).
   ```java
   @Scheduled(fixedRate = 5000)
   public void fixedRateTask() {
       // Task code
   }
   ```

2. **Fixed Delay**: 
   The task is executed after a fixed delay from the completion of the last execution.
   ```java
   @Scheduled(fixedDelay = 5000)
   public void fixedDelayTask() {
       // Task code
   }
   ```

3. **Cron Expression**: 
   Cron expressions provide flexibility to run tasks at specific times. Example:
   ```java
   @Scheduled(cron = "0 0/2 * * * ?")
   public void cronJob() {
       // Task code
   }
   ```

4. **Initial Delay**: 
   You can set a delay before the first execution of a task:
   ```java
   @Scheduled(initialDelay = 5000, fixedRate = 10000)
   public void delayedStartTask() {
       // Task code
   }
   ```

---

### **Important Notes**:
- The `@Scheduled` annotation can be used with `fixedRate`, `fixedDelay`, `cron`, or `initialDelay` properties.
- Always use `@EnableScheduling` in your Spring Boot application to activate scheduling functionality.
- Keep in mind that scheduled tasks run in a single thread by default, so be cautious of long-running tasks that could block other scheduled tasks. You can configure thread pools for scheduled tasks if needed.

---

With this setup, you can easily schedule and run tasks at different intervals in a Spring Boot application, whether it's printing messages, running batch jobs, or interacting with external systems.







suppose if i want to run multiple scheduler at a time then 


To configure thread pools for scheduled tasks in Spring Boot, you can use the `TaskScheduler` interface, which allows you to define a custom thread pool for scheduled tasks. By default, Spring Boot uses a single-threaded scheduler, but if you have multiple tasks that need to run concurrently, you can configure a thread pool to handle those tasks.

### **Steps to Configure Thread Pools for Scheduled Tasks:**

1. **Create a Bean for TaskScheduler**:
   You can define a `ThreadPoolTaskScheduler` bean that configures the thread pool for your scheduled tasks. You can also specify properties like pool size, thread name prefix, etc.

2. **Use `@EnableScheduling`**:
   Ensure that scheduling is enabled in your Spring Boot application using `@EnableScheduling`.

### **Example: Configuring a Thread Pool for Scheduled Tasks**

#### 1. **Main Application Class (Spring Boot)**

```java
package com.example.scheduledtask;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling  // Enable scheduling in the application
public class ScheduledTaskApplication {
    public static void main(String[] args) {
        SpringApplication.run(ScheduledTaskApplication.class, args);
    }
}
```

#### 2. **Configure Thread Pool for Scheduled Tasks**

In your configuration, define a `ThreadPoolTaskScheduler` bean with custom settings:

```java
package com.example.scheduledtask;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

@Configuration
public class SchedulerConfig {

    @Bean
    public ThreadPoolTaskScheduler taskScheduler() {
        ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();
        scheduler.setPoolSize(5);  // Set the pool size (number of threads)
        scheduler.setThreadNamePrefix("scheduled-task-");  // Set thread name prefix for easier identification
        scheduler.setDaemon(true);  // Set to true if you want the threads to be daemon threads
        return scheduler;
    }
}
```

In this configuration:

- **`setPoolSize(5)`**: Sets the number of threads available for executing scheduled tasks.
- **`setThreadNamePrefix("scheduled-task-")`**: Sets the prefix for the thread names, so it's easier to identify the threads handling scheduled tasks.
- **`setDaemon(true)`**: If `true`, the threads will be daemon threads (they will not prevent the application from shutting down if all other non-daemon threads are finished).

#### 3. **Scheduled Task Service**

Here’s the `TaskService` class where you define your scheduled tasks:

```java
package com.example.scheduledtask;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class TaskService {

    @Scheduled(fixedRate = 5000)
    public void printMessage() {
        System.out.println(Thread.currentThread().getName() + ": Hello! This message is printed every 5 seconds.");
    }

    @Scheduled(cron = "30 * * * * *")
    public void printCronMessage() {
        System.out.println(Thread.currentThread().getName() + ": Cron job: This runs every minute at the 30th second.");
    }
}
```

#### 4. **Explanation**

- When you run the application, the scheduled tasks will be executed by the threads from the pool defined by the `ThreadPoolTaskScheduler`.
- Each scheduled task (e.g., `printMessage` and `printCronMessage`) will be executed by a thread from the thread pool, allowing multiple tasks to run concurrently if needed.
- You can configure the pool size to match the number of tasks you expect to run concurrently.

#### 5. **Expected Output**

When you run the application, you will see the output like:

```
scheduled-task-1: Hello! This message is printed every 5 seconds.
scheduled-task-2: Cron job: This runs every minute at the 30th second.
scheduled-task-1: Hello! This message is printed every 5 seconds.
scheduled-task-2: Cron job: This runs every minute at the 30th second.
```

This way, the scheduled tasks are handled by the threads from the custom thread pool, and the tasks are allowed to run concurrently.

#### 6. **Optional: Configure Thread Pool Size in `application.properties`**

Alternatively, you can also specify the thread pool size in `application.properties`, although the configuration via Java `ThreadPoolTaskScheduler` gives you more control.

```properties
# Set pool size for scheduled tasks
spring.task.scheduling.pool.size=5
```

This approach works for simple cases where you want to configure the thread pool size directly through properties. However, for more complex configurations, such as custom naming and daemon threads, you should use the `ThreadPoolTaskScheduler` as shown above.

### **Key Considerations**

- **Thread Pool Size**: Adjust the pool size based on the expected number of tasks and their execution times. Too few threads may cause delays, while too many may lead to resource exhaustion.
- **Daemon Threads**: Set `setDaemon(true)` if you don’t want scheduled tasks to prevent the application from shutting down.
- **Task Execution**: Ensure that scheduled tasks are lightweight. Long-running tasks should be executed asynchronously or outside the scheduler to avoid blocking other scheduled tasks.

By using a thread pool, you allow multiple scheduled tasks to execute concurrently, improving the efficiency and responsiveness of your Spring Boot application.






SHREADLOCK IN SPRINGBOOT(PREVENT DUBLICATE SCHEDULED TASKS) :
in a single instance application everything works fine,no duplicate execution..but when u deploy the application across multiple instance..how can u ensure that the scheduled task don't run simultaneously on different server...
Eg: 
   if it ran on instance 1 then it should not execute again on either instance 2 or instance 3....THAT IS WHERE SHREADLOCK COMES INTO THE PICTURE..
     Instance 1                 Instance 2                   Instance 3
 	    ✓                            ❌                           ❌
		❌                            ✓                           ❌
		❌							 ❌                            ✓
		
Shreadlock is a lightweight library that ensure your scheduled-task run only once in a distributed system.. 