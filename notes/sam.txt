EMPLOYEEDASHBOARD.JS :      

import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { getEmployees, createEmployee, updateEmployee, deleteEmployee } from '../redux/actions/employeeActions';
import { TextField, Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';

const EmployeeDashboard = () => {
    const dispatch = useDispatch();
    const employees = useSelector(state => state.employee.employees);
    const [name, setName] = useState('');
    const [role, setRole] = useState('');
    const [idToUpdate, setIdToUpdate] = useState(null);

    useEffect(() => {
        dispatch(getEmployees());
    }, [dispatch]);

    const handleSubmit = (e) => {
        e.preventDefault();
        if (idToUpdate) {
            dispatch(updateEmployee(idToUpdate, { name, role }));
            setIdToUpdate(null);
        } else {
            dispatch(createEmployee({ name, role }));
        }
        setName('');
        setRole('');
    };

    const handleEdit = (employee) => {
        setIdToUpdate(employee.id);
        setName(employee.name);
        setRole(employee.role);
    };

    const handleDelete = (id) => {
        dispatch(deleteEmployee(id));
    };

    return (
        <div>
            <h2>Employee Dashboard</h2>
            <form onSubmit={handleSubmit}>
                <TextField
                    label="Name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                />
                <TextField
                    label="Role"
                    value={role}
                    onChange={(e) => setRole(e.target.value)}
                />
                <Button type="submit">{idToUpdate ? 'Update' : 'Add'} Employee</Button>
            </form>
            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell>Name</TableCell>
                            <TableCell>Role</TableCell>
                            <TableCell>Actions</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {employees.map((employee) => (
                            <TableRow key={employee.id}>
                                <TableCell>{employee.name}</TableCell>
                                <TableCell>{employee.role}</TableCell>
                                <TableCell>
                                    <Button onClick={() => handleEdit(employee)}>Edit</Button>
                                    <Button onClick={() => handleDelete(employee.id)}>Delete</Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>
        </div>
    );
};

export default EmployeeDashboard;



LOGIN.JS : 
import React, { useState } from 'react';
import { TextField, Button } from '@mui/material';
import axios from 'axios';
import { useNavigate } from "react-router-dom";


const Login = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();

    const handleLogin = async (e) => {
        e.preventDefault();
        try {
          console.log("Sending login request with:", { username, password });
    
          const response = await axios.post("http://localhost:2001/auth/login", {
            username,
            password,
          });
    
          console.log("Login response:", response);
          const token  = response.data;
          console.log(token);
    
          localStorage.setItem("token", token);
    
          navigate("/dashboard");
        } catch (error) {
          console.error("Login failed:", error);
          alert("Login failed. Please check your credentials.");
        }
    };

    return (
        <div>
            <h2>Login</h2>
            <TextField label="Username" onChange={(e) => setUsername(e.target.value)} />
            <TextField label="Password" type="password" onChange={(e) => setPassword(e.target.value)} />
            <Button onClick={handleLogin}>Login</Button>
        </div>
    );
};

export default Login;


REGISTER.JS : 
import React, { useState } from 'react';
import { TextField, Button } from '@mui/material';
import axios from 'axios';
import { useNavigate } from "react-router-dom";


const Register = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [role, setRole] = useState('');
    const navigate = useNavigate();

    const handleRegister = async (e) => {
        e.preventDefault();
        try {
            await axios.post('http://localhost:2001/auth/signup', { username, password, role });
            navigate('/login');
        } catch (error) {
            console.error('Registration failed:', error);
            alert('Registration failed');
        }
    };

    return (
        <div>
            <h2>Register</h2>
            <TextField label="Username" onChange={(e) => setUsername(e.target.value)} />
            <TextField label="Password" type="password" onChange={(e) => setPassword(e.target.value)} />
            <TextField label="Role" onChange={(e) => setRole(e.target.value)} />
            <Button onClick={handleRegister}>Register</Button>
        </div>
    );
};

export default Register;


EMPLOYEEACTION.JS : 
export const GET_EMPLOYEES = 'GET_EMPLOYEES';
export const GET_EMPLOYEES_SUCCESS = 'GET_EMPLOYEES_SUCCESS';
export const GET_EMPLOYEES_FAILURE = 'GET_EMPLOYEES_FAILURE';

export const CREATE_EMPLOYEE = 'CREATE_EMPLOYEE';
export const CREATE_EMPLOYEE_SUCCESS = 'CREATE_EMPLOYEE_SUCCESS';
export const CREATE_EMPLOYEE_FAILURE = 'CREATE_EMPLOYEE_FAILURE';

export const UPDATE_EMPLOYEE = 'UPDATE_EMPLOYEE';
export const UPDATE_EMPLOYEE_SUCCESS = 'UPDATE_EMPLOYEE_SUCCESS';
export const UPDATE_EMPLOYEE_FAILURE = 'UPDATE_EMPLOYEE_FAILURE';

export const DELETE_EMPLOYEE = 'DELETE_EMPLOYEE';
export const DELETE_EMPLOYEE_SUCCESS = 'DELETE_EMPLOYEE_SUCCESS';
export const DELETE_EMPLOYEE_FAILURE = 'DELETE_EMPLOYEE_FAILURE';

export const getEmployees = () => ({ type: GET_EMPLOYEES });
export const createEmployee = (employee) => ({ type: CREATE_EMPLOYEE, payload: employee });
export const updateEmployee = (id, employee) => ({ type: UPDATE_EMPLOYEE, payload: { id, employee } });
export const deleteEmployee = (id) => ({ type: DELETE_EMPLOYEE, payload: id });


EMPLOYEEREDUCER.JS :

import {
    GET_EMPLOYEES_SUCCESS,
    CREATE_EMPLOYEE_SUCCESS,
    UPDATE_EMPLOYEE_SUCCESS,
    DELETE_EMPLOYEE_SUCCESS,
} from '../actions/employeeActions';

const initialState = {
    employees: [],
    loading: false,
    error: null,
};

const employeeReducer = (state = initialState, action) => {
    switch (action.type) {
        case GET_EMPLOYEES_SUCCESS:
            return { ...state, employees: action.payload };
        case CREATE_EMPLOYEE_SUCCESS:
            return { ...state, employees: [...state.employees, action.payload] };
        case UPDATE_EMPLOYEE_SUCCESS:
            return {
                ...state,
                employees: state.employees.map(emp => emp.id === action.payload.id ? action.payload : emp),
            };
        case DELETE_EMPLOYEE_SUCCESS:
            return {
                ...state,
                employees: state.employees.filter(emp => emp.id !== action.payload),
            };
        default:
            return state;
    }
};

export default employeeReducer;


INDEX.JS :

import { combineReducers } from 'redux';
import employeeReducer from './employeeReducer';

const rootReducer = combineReducers({
    employee: employeeReducer,
});

export default rootReducer;


EMPLOYEESAGA.JS :


import { call, put, takeEvery } from 'redux-saga/effects';
import axios from 'axios';
import {
    GET_EMPLOYEES,
    GET_EMPLOYEES_SUCCESS,
    GET_EMPLOYEES_FAILURE,
    CREATE_EMPLOYEE,
    CREATE_EMPLOYEE_SUCCESS,
    CREATE_EMPLOYEE_FAILURE,
    UPDATE_EMPLOYEE,
    UPDATE_EMPLOYEE_SUCCESS,
    UPDATE_EMPLOYEE_FAILURE,
    DELETE_EMPLOYEE,
    DELETE_EMPLOYEE_SUCCESS,
    DELETE_EMPLOYEE_FAILURE,
} from '../actions/employeeActions';

const API_URL = 'http://localhost:2001/api/employees';

function* fetchEmployees() {
    try {
        const response = yield call(axios.get, API_URL);
        yield put({ type: GET_EMPLOYEES_SUCCESS, payload: response.data });
    } catch (error) {
        yield put({ type: GET_EMPLOYEES_FAILURE, error });
    }
}

function* createEmployee(action) {
    try {
        const response = yield call(axios.post, API_URL, action.payload);
        yield put({ type: CREATE_EMPLOYEE_SUCCESS, payload: response.data });
    } catch (error) {
        yield put({ type: CREATE_EMPLOYEE_FAILURE, error });
    }
}

function* updateEmployee(action) {
    try {
        const response = yield call(axios.put, `${API_URL}/${action.payload.id}`, action.payload.employee);
        yield put({ type: UPDATE_EMPLOYEE_SUCCESS, payload: response.data });
    } catch (error) {
        yield put({ type: UPDATE_EMPLOYEE_FAILURE, error });
    }
}

function* deleteEmployee(action) {
    try {
        yield call(axios.delete, `${API_URL}/${action.payload}`);
        yield put({ type: DELETE_EMPLOYEE_SUCCESS, payload: action.payload });
    } catch (error) {
        yield put({ type: DELETE_EMPLOYEE_FAILURE, error });
    }
}

export default function* employeeSaga() {
    yield takeEvery(GET_EMPLOYEES, fetchEmployees);
    yield takeEvery(CREATE_EMPLOYEE, createEmployee);
    yield takeEvery(UPDATE_EMPLOYEE, updateEmployee);
    yield takeEvery(DELETE_EMPLOYEE, deleteEmployee);
}
 
INDEX.JS : 
import { all } from 'redux-saga/effects';
import employeeSaga from './employeeSagas';

export default function* rootSaga() {
    yield all([employeeSaga()]);
}

STORE.JS :

import { applyMiddleware } from 'redux';
import createSagaMiddleware from 'redux-saga';
import { configureStore } from "@reduxjs/toolkit";
import rootReducer from './reducers';
import rootSaga from './sagas';

const sagaMiddleware = createSagaMiddleware();
const store =  configureStore(rootReducer, applyMiddleware(sagaMiddleware));

sagaMiddleware.run(rootSaga);

export default store;

APP.JS:

import React from 'react';
import { Provider } from 'react-redux';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import store from './redux/store';
import Login from './pages/Login';
import Register from './pages/Register';
import EmployeeDashboard from './pages/EmployeeDashboard';
import { Container } from '@mui/material';

const App = () => {
    return (
        <Provider store={store}>
            <Router>
                <Container>
                    <Routes>
                        <Route path="/" element={<Login />} />
                        <Route path="/register" element={<Register />} />
                        <Route path="/dashboard" element={<EmployeeDashboard />} />
                    </Routes>
                </Container>
            </Router>
        </Provider>
    );
};

export default App;


INDEX.JS : 
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
reportWebVitals();
































AUTHCONTROLLER CLASS :
package com.example.EmployeeManagementSystem.controller;

import com.example.EmployeeManagementSystem.entity.SignUp;
import com.example.EmployeeManagementSystem.entity.User;
import com.example.EmployeeManagementSystem.service.AuthService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@CrossOrigin(origins="*")
@RestController
@RequestMapping("/auth")
@Tag(name = "Authentication", description = "Authentication related APIs")
public class AuthController {

    @Autowired
    private AuthService authService;

    @PostMapping("/signup")
    @Operation(summary = "Sign up a new user", description = "Registers a new user and saves in the database")
    public ResponseEntity<User> signUp(@RequestBody SignUp signUp) throws Exception {
        User user = authService.saveUser(signUp);
        return ResponseEntity.ok(user);
    }

    @PostMapping("/login")
    @Operation(summary = "Login user", description = "Authenticates a user and returns a JWT token")
    public ResponseEntity<String> login(@RequestBody SignUp signUp) {
        String token = authService.authenticate(signUp);
        return ResponseEntity.ok(token);
    }
}
EMPLOYEECONTROLLER CLASS :
package com.example.EmployeeManagementSystem.controller;

import com.example.EmployeeManagementSystem.entity.Employee;
import com.example.EmployeeManagementSystem.repository.EmployeeRepository;
import com.example.EmployeeManagementSystem.service.EmployeeService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


@CrossOrigin(origins="*")
@RestController
@RequestMapping("/api/employees")
@Tag(name = "Employee Management", description = "Employee Management APIs")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    @Operation(summary = "Get all employees", description = "Returns a list of all employees")
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    @Operation(summary = "Get employee by ID", description = "Returns an employee by their ID")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
        Employee employee = employeeService.getEmployeeById(id);
        return ResponseEntity.ok(employee);
    }

    @PostMapping
    @Operation(summary = "Create a new employee", description = "Creates a new employee record")
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeService.createEmployee(employee);
    }

    @PutMapping("/{id}")
    @Operation(summary = "Update employee", description = "Updates an employee record")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee employeeDetails) {
        Employee updatedEmployee = employeeService.updateEmployee(id, employeeDetails);
        return ResponseEntity.ok(updatedEmployee);
    }

    @DeleteMapping("/{id}")
    @Operation(summary = "Delete employee", description = "Deletes an employee by their ID")
    public Map<String, Boolean> deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);

        Map<String, Boolean> response = new HashMap<>();
        response.put("deleted", Boolean.TRUE);
        return response;
    }
}
EMPLOYEE CLASS :

package com.example.EmployeeManagementSystem.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.*;

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String firstName;
    private String lastName;
    private String email;
    private String department;

}

SIGNUP CLASS :
package com.example.EmployeeManagementSystem.entity;

import jakarta.persistence.Entity;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@Entity
public class SignUp {


    private String firstname;
    private String lastname;
    private String email;
    private String username;
    private String password;
    private String role;


}
USER CLASS :

package com.example.EmployeeManagementSystem.entity;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.Collections;

@Entity
@Data
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Table(name = "users")
public class User implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
    private String password;
    private String role;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return Collections.singleton(() -> role);
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}
JWTCONFIGURATION CLASS :
package com.example.EmployeeManagementSystem.JWT;

import com.example.EmployeeManagementSystem.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@Configuration
public class JWTConfiguration {

    @Autowired
    UserRepository repository;

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration autConfiguration) throws Exception {
        return autConfiguration.getAuthenticationManager();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }


    @Bean
    UserDetailsService userDetailsService() {
        return userName -> repository.findByUsername(userName)
                .orElseThrow(() -> new UsernameNotFoundException("User not Found"));
    }
    @Bean
    BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
JWTFILTER CLASS :
package com.example.EmployeeManagementSystem.JWT;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;


import java.io.IOException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;


@Component
public class JWTFilter extends OncePerRequestFilter {

    @Autowired
    JWTService jwtService;

    @Autowired
    UserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String authHeader = request.getHeader("Authorization");
        if(authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            if(token != null && !(jwtService.isTokenExpired(token))) {
                UserDetails user = userDetailsService.loadUserByUsername(jwtService.extractName(token));
                UsernamePasswordAuthenticationToken authToken = new
                        UsernamePasswordAuthenticationToken(user,null,user.getAuthorities());
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }

        }
        filterChain.doFilter(request, response);
    }


}
JWTSERVICE CLASS :
package com.example.EmployeeManagementSystem.JWT;

import java.security.Key;
import java.security.SignatureException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import io.jsonwebtoken.ExpiredJwtException;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Service
public class JWTService {

    String signatureKey = "f3ef4f303d10f3dff46420489545aad6e5c3dc2435731b92be9ca975baa6b393";
    int expiration = 1000*60*3;//3 minutes

    public String genrateToken(UserDetails userDetails) {
        return genrateToken(new HashMap<>(),userDetails);
    }

    public String genrateToken(Map<String,Object> extraClaims, UserDetails userDetails) {

        return Jwts
                .builder()
                .setClaims(extraClaims)
                .setExpiration(new Date(System.currentTimeMillis()+expiration))
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setSubject(userDetails.getUsername())
                .signWith(getSignKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    private Key getSignKey() {
        byte [] key = Decoders.BASE64.decode(signatureKey);
        return Keys.hmacShaKeyFor(key);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimResolver) {
        final Claims claim = extractAllClaims(token);
        return claimResolver.apply(claim);
    }

    public String extractName(String token) {
        return extractClaim(token, Claims::getSubject);
    }
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public Claims extractAllClaims(String token) {
        try {
            return Jwts
                    .parser()
                    .setSigningKey(getSignKey())
                    .build()
                    .parseClaimsJws(token)
                    .getBody();
        } catch (ExpiredJwtException e) {
            throw new RuntimeException("Token expired", e);
        } catch (Exception e) {
            throw new RuntimeException("Invalid token", e);
        }
    }

    public boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractName(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

}
SECURITYCONFIG CLASS :
package com.example.EmployeeManagementSystem.JWT;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    AuthenticationProvider authenticationProvider;

    @Autowired
    JWTFilter jwtFilter;


    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

        return http
                .cors(cros->cros.configure(http))
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth ->
                        auth.requestMatchers("/auth/**","/api/employees/**", "/swagger-ui/**", "/v3/api-docs/**","/h2-console").permitAll()
                                .anyRequest().authenticated())
                .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authenticationProvider(authenticationProvider)
                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }

}
EMPLOYEEREPOSITORY :
package com.example.EmployeeManagementSystem.repository;

import com.example.EmployeeManagementSystem.entity.Employee;
import org.springframework.data.jpa.repository.JpaRepository;


public interface EmployeeRepository extends JpaRepository<Employee, Long> {

}
SIGNUPREPOSITORY :
package com.example.EmployeeManagementSystem.repository;

import com.example.EmployeeManagementSystem.entity.SignUp;
import org.springframework.data.jpa.repository.JpaRepository;


public interface SignUpRepository extends JpaRepository<SignUp, Long> {
}
USERREPOSITORY :
package com.example.EmployeeManagementSystem.repository;

import com.example.EmployeeManagementSystem.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}
AUTHSERVICE CLASS :
package com.example.EmployeeManagementSystem.service;

import com.example.EmployeeManagementSystem.JWT.JWTService;
import com.example.EmployeeManagementSystem.entity.SignUp;
import com.example.EmployeeManagementSystem.entity.User;
import com.example.EmployeeManagementSystem.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class AuthService {

    @Autowired
    private UserRepository repository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JWTService jwtService;

    @Autowired
    private AuthenticationManager authManager;

    public User saveUser(SignUp request) throws Exception {
        if (repository.findByUsername(request.getUsername()).isPresent()) {
            throw new Exception("This Username already registered");
        }

        User user = new User();
        user.setUsername(request.getUsername());
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user.setRole(request.getRole());
        return repository.save(user);
    }

    public String authenticate(SignUp request) {
        authManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        request.getUsername(),
                        request.getPassword())
        );
        User user = repository.findByUsername(request.getUsername())
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));

        return jwtService.genrateToken(user);    }
}
EMPLOYEESERVICE CLASS :
package com.example.EmployeeManagementSystem.service;

import com.example.EmployeeManagementSystem.entity.Employee;
import com.example.EmployeeManagementSystem.repository.EmployeeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    public Employee getEmployeeById(Long id) {
        return employeeRepository.findById(id)
                .orElseThrow(() -> new UsernameNotFoundException("Employee not found"));
    }

    public Employee createEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public Employee updateEmployee(Long id, Employee employeeDetails) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new UsernameNotFoundException("Employee not found"));

        employee.setFirstName(employeeDetails.getFirstName());
        employee.setLastName(employeeDetails.getLastName());
        employee.setEmail(employeeDetails.getEmail());
        employee.setDepartment(employeeDetails.getDepartment());

        return employeeRepository.save(employee);
    }

    public void deleteEmployee(Long id) {
        Employee employee = getEmployeeById(id);
        employeeRepository.delete(employee);
    }
}



















