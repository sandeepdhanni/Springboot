Springsecurity:


Spring Security is a framework which provides various security features like: authentication, 
authorization to create secure Java Enterprise Applications.This framework targets two major 
areas of application are authentication and authorization. Authentication is the process of
 knowing and identifying the user that wants to access.Authorization is the process to allow
 authority to perform actions in the application.



Authentication is the method of verifying the identity of a consumer or system to ensure 
they’re who they claim to be. It involves checking credentials which include usernames,
 passwords, or biometric information like fingerprints or facial recognition.

Authorization is the method of figuring out and granting permissions to a demonstrated 
user or system, specifying what assets they can access and what actions they’re allowed 
to carry out.


Spring Security Filters
A series of Spring Security filters intercept each request & work together to identify
 if Authentication is required or not. If authentication is
required, accordingly navigate the user to login page 



Authentication : Filters like UsernamePasswordAuthenticationFilter will extract username/
 password from HTTP request & prepare Authentication type object
Because Authentication is the core standard of storing authenticated user details insdie
 Spring Security framework.


AuthenticationManager : Once received request from filter, it delegates the validating
 of the user details to the authentication providers available. Since there can be
multiple providers inside an app, it is the responsibility of the AuthenticationManager
 to manage all the authentication providers available.


AuthenticationProvider : AuthenticationProviders has all the core logic of validating
 user details for authentication


UserDetailsManager/UserDetailsService : It helps in retrieving, creating, updating,
 deleting the User Details from the DB/storage systems.


PasswordEncoder : Service interface that helps in encoding & hashing passwords.
 Otherwise we may have to live with plain text passwords &




Following are Core Components of the Spring Security Filter Chain:

    Security Filter Chain: The security filter chain is a sequence of filters that 
Spring Security applies to each incoming HTTP request. These filters work together 
to perform various security-related tasks.


Security Filter Chain Configuration: You define the security filter chain and its 
configuration in your Spring Security configuration class. This class typically extends
 SecurityConfigurerAdapter and overrides configure(HttpSecurity http) to specify how the 
filter chain should behave.
Security Filters: These are individual filters that perform specific security tasks.








HS256 is a symmetric signing method. This means that the same secret key is used to
 both create and verify the signature.



A JSON web token(JWT) is JSON Object which is used to securely transfer information
 over the web(between two parties). It can be used for an authentication system and 
can also be used for information exchange. The token is mainly composed of header, 
payload, signature. These three parts are separated by dots(.).


JWT claims are statements about an entity (typically, the user) and additional data. 
Claims are encoded into the JWT payload as key-value pairs.
There are three types of claims:

Registered Claims: Predefined claims which are not mandatory but recommended.

Public Claims: These can be defined at will by those using JWTs. 

Private Claims: These are custom claims created to share information between 
parties that agree on using them

eg:
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true,
  "iat": 1516239022
}
sub is a registered claim
name and admin are either public or private claims
iat is a registered claim (Issued At)


signature key : 
The signature key, also known as the secret key, is a crucial component in JSON 
Web Tokens..The signature key is used to sign the JWT payload, ensuring its 
authenticity and integrity. The signature key is used to verify the token's 
signature, ensuring it hasn't been tampered with or altered.The signature key 
helps authenticate the token issuer, ensuring the token comes from a trusted source.





jwt structure:

Header: contains metadata about the type of token and the cryptographic algorithms 
used to secure its contents.

JWS payload: contains verifiable security statements, such as the 
identity of the user and the permissions they are allowed.The payload is the part
 of the JWT where all the user data is actually added.


Signature

This is the third part of JWT and used to verify the authenticity of token.
 BASE64URL encoded header and payload are joined together with dot(.)
The signature is generated by taking the base64-encoded header and payload, 
concatenating them with a period (.), and then signing the resulting string using 
the specified algorithm (e.g., HS256 or RS256).  


question : 

suppose if i generate a token with 5 min and i get the token with credentials and
 after 2 minutes if i generate new token with same credentials ...what will happen
 to the old toke....will it work or not?

When you generate a new token with the same credentials, the old token will still be
 valid until its expiration time (in this case, 3 minutes remaining). This is because 
tokens are stateless, meaning the server doesn't keep track of issued tokens.  