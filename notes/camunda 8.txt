
Camunda 8 is the latest version of Camunda, an open-source workflow and decision automation platform. 

Improved Architecture: Camunda 8 introduces a more modular and flexible architecture, making it easier to integrate with other systems and scale.
Cloud-Native: Designed for cloud environments, Camunda 8 supports containerization and serverless deployment.

difference between camunda 7 and camunda 8:
Integration
REST API (Camunda 7): Camunda 7 provides a REST API for integration.
Improved REST API and Connectors (Camunda 8): Camunda 8 enhances the REST API and adds more connectors for easier integration.
Security
Basic Authentication (Camunda 7): Camunda 7 offers basic authentication mechanisms.
Enhanced Security (Camunda 8): Camunda 8 strengthens security with improved authentication, authorization, and encryption.
Deployment
Traditional Deployment (Camunda 7): Camunda 7 typically deploys on traditional application servers or containers.
Cloud-Native Deployment (Camunda 8): Camunda 8 supports cloud-native deployment on Kubernetes, Docker, and serverless environments.
Architecture
Camunda 7:
Monolithic architecture.
Built around a single, vertically scalable process engine
Camunda 8:
Microservices-based architecture 
Uses Zeebe as its core engine, which is designed for distributed systems.



components in camunda are :
modeler-The Camunda Modeler is a desktop or web-based tool for creating and editing BPMN diagrams that define workflows.

operator- The Operate component is used for monitoring and troubleshooting workflows.
Key features:
Workflow Visualization: Provides real-time visibility into active and completed workflows.
Error Handling: Detects and allows for manual resolution of errors in workflow executions.

tasklist - The Tasklist is an out-of-the-box application that allows end-users to view and manage user tasks assigned to them.
Key features:
User Task Management: Helps users claim, complete, or delegate tasks within a workflow.
Role-Based Access: Tasks are assigned and managed based on roles or users

optimize - The Optimize component focuses on reporting and process improvement.
Key features:
Analytics and Reports: Generates reports based on workflow data to analyze performance.
Dashboards: Provides visual dashboards to monitor key process metrics (KPIs).

connectors - Connectors are pre-built integrations that enable Camunda workflows to interact with external systems.


BPM(business process management):
it is a systematic approach for designing,executing,documenting,monitoring and controlling both automated and non automated process..


BPMN(business process model and notaion) -BPMN is a standardized notation or visual language used to model and represent business 
processes. It is a diagramming standard used to document and design workflows in a way that is understandable by both business 
stakeholders and technical teams.BPMN is a powerful modeling language for simple and complex business processes.

OMG(object management group) - it is responsible for maintainance of bpmn standards..



simulaton token - the simulation token is a concept primarily related to process visualization and testing. It is used to represent
the execution of a business process instance as it moves through the BPMN workflow. The simulation token provides a way to visually 
track the flow of execution during modeling, testing, or debugging of a process, ensuring that the process behaves as expected 
before deployment.



BPMN flow elements:
events - they describe things that happens before or during the end of the process...they can happen regardless of the process or as a
result of the process..u can react to an event or trigger to an events..

tasks - this is an activity that has to be done...

gateways - these are elements that represent multiple possible paths in the process..







zeebe engine :
Zeebe is the heart of Camunda 8 and acts as the core workflow engine. It is a streaming-based, distributed, and event-driven engine 
designed for high scalability and fault tolerance.
BPMN Support: Zeebe supports the Business Process Model and Notation (BPMN) standard for defining workflows.
Event-Driven: It processes workflows as a sequence of events, making it suitable for integrating with event-driven systems (e.g., Kafka).
zeebe is a workflow engine what powers camunda 8.its been newely designed cloud native engine as a 5 yr of research an develoopment.
your business logic lives in worker, microservices that interact with the zeebe engine through a secure grpc gateway and your brokers 
within your zeebe clusters are responsible for executing the bpmn..workers can be implemented in your favourite programming language
as we do have clients for major programming language....zeebe uses a event based architecture that destributes and replicate the run
time state of your process instances over several 

zeebe vs classical engine throughput:
designed to accommodate high throughput use case out of the box.
no relatyional database bottleneck...
linear performance scalling...


 

tasks in camunda 8 -
user task - the user task iis used to define an activity that needs to be completed by human actor...
when the token arrives to the user tasks it will stop at this point and waits until the task is 
completedby human actor..

business rule task - 
it is used to define the evaluation of business rules..those are typically modeled in decision model and notaion(DMN)..
once the decision is made process instance is continues...


manual task - it is used to define the activity that is external to the bpm engine..when u set the task as manuel it means that
the engine does not need to know who will do this activity and there is no known system or user interface..when the token arrives
at this task the process instance will continue automatically..for the engine manual task is handled as pass activity..

service task - it is used to define the automatic execution of that task..typically it represends service task...this means that 
the engine does not execute the task by itself but deligates to different it system...when the token reaches the service task,it 
waits for the external system to complete the task before it continues it


script task- it is used to define the evaluation of script..


send task and receive task - it is used for sending and receiving message..when the token arrives to send task,the process instance 
sends a message to the external system..it is same as service task..
the receiver task referance the message, so the process instanc has to wait here until the proper mesasge is received..



events in camunda 8:
they are flow elements along with tasks and gateways...
tasks - things that has to be done during the process..
gateways - circumstances that lead to different path in the flow...
events - things that is suppose to happen..



start event - shows the event that causes the process to start...this is where the process or subprocess starts...

intermediate events - nothing happens but some state indicate some state archieved in the process..they are espically useful for 
monitoring to understand how the process is doing..

end event - this will end the process....

catching events(passive or start event) - they have a defined trigger : something happened independent of the 
process...the process has to wait for this event or react to it..
catching event may result in :
the process starting


throwing event - 
the event is caused or triggered by the process itself...


timer events -
they are the events triggered by a defined timer..
timer events can be :
1. timer start events- a process can have one or more timer events...each of the timer events must have either a time or date or lifecycle defineation...when a timer is triggered a new peocess is created and the corresponding timer event is activated..
2. intermediate timer catch events - an intermediate timer catch event mush have a time duration that defines
when it defines when it is triggered....


conditional events -
sometimes we only want a process to start or to continue if a certian condition is true..anything can be condition(like the timeer event) can only exist as a catching event..
the conditional event is triggered if a given condition is evaluated to true...

message events - it is used to send or recieve the events..
with the message throw event we send the message..
with the message catch event we have to rely on the sender,so we wait until we receive the message
we have :
message start event and end event
intermediate message catch or throw events



boundary event -
they are the only intermediate catching events that are attached to a task within a process..you wait for them while you do something else in the process...
there are two types in boundary events..they are :
interrupting and non interrupting boundary events

intermediate boundary event - when triggered , they cancel the task.
non interrupting boundary event - when triggered,they create a new token that runs parallel with the initial token..


event based gateway - it is similar to exclusive data based gateway, the event based gateways offers a different way to design process paths...this gateway does not route based on data, but reather by which event takes place next...not all intermediate events combine with the event gateway...you can , however combine it with a receive task..
events are used to model the things that are supposed to happen during a process...events can be catching or throwing....events can be attched to tasks(boundary events,interruptingor non-interrupting)..



signal startevent:

it is just like message event like when u want to trigger some message event u need to send a message name




BPMN participants - 
participant is the entity who controls a single process,or the tasks within a process..this could be :
a person
an organization
a department
a role
participants are represented as pools and lanes ...pools shows who controls the process and lanes are who are responsible for task within it..


pool :
pool represents the participant who controls the single process..it contains all the flow nodes and artifacts that make up to single process..since the process is entirtely contained within the pool sequence flows cannot leave the boundaries of the pool..the pool controls the process flow..besides the task within the process similar to a conductor assign the pieces of a musical score to musicians in an archestra...assignment of tasks within a process is also referred to as orchestration...anytime a new process is created pool is implied in the modeler even though u have not defined it is there by default...1 process=1 pool


lanes :
while the pool behaves like the conductor for the whole process...lanes alos known as swim lanes are like a vaarious musicians in orcastra..each lane defines who or waht is responsible for completing each of the task in the process..lanes can be named according to :
positions or roles within the organization("manager")
General roles("customer,user")
Department("sales,accounting")
applications("crm system")
 each flow object(events,activities,gateways) can only belong to a single lane.
lanes can be useful for clarifying who owns the tasks within a process but they also have some drawbacks the are :
adding multiple lanes to a pool makes the process harder to read..
lanes make it more difficult to change the process down  the line,which increases the maintainance burden..

when to use lanes?
we can use lanes only in stategic process and operational process model..
stategic process model - 
focused on responsibilities and their borders.high level overview(birds eye view),logically abstract,not meant to be executable,avoids complicated events or structures,
operational process model - focused on human workflows.it is low level(worm eye view),logically concrete,coordinates details between human workflow and technical workfloww.can be detailed and complex..



FEEL() -
FEEL (Friendly Enough Expression Language) is a key component in Camunda 8, designed to write expressions that are easily understood by both business professionals and developers. Here are the main points about FEEL:
Purpose: FEEL is used to define expressions in BPMN diagrams, DMN diagrams, and Forms within Camunda 8
Origin: It is specified in the DMN (Decision Model and Notation) specification by the Object Management Group (OMG) 




BPMN message - 
message enables the communication between processes and other systems..messages helps model and understand information is shared and flows between different parts of the overall business process..


choosing between task and event messages -
send messages are active and receive mesages are passive..
tasks- a task emphasizes the action, you can attach several different boundary events to a message task.
events - the event reflects a status,use a message event when : you start a process when a message is received,a message triggers or interrupts the flow..best practice is use a task for sending messages and a event for receiving messages..


orchestration - we have one pool where orchestrator make sure that the task are assigned correctly..in each participant lane.. 


collaboration - each participant orchestrate their tasks which means they are represented in seperate pools..the interaction between them are modeled with message flows..
collapsed pool: shows the different services/processes that are connected to the expanded process.


synchronous adn asynchronous communicartion - receive instant response where as asynchronous means waitin for the response..the sender of the message expects a immediate response from the receiver before proceding to the next activity.....
asynchronous communication  means the sender of the message does not wait for the immediate response from the receiver..the sender can continue with other activitywhile waiting for the response asynchronously...for asynchronmous request response calls u can use send task for the request and the following receiving task or receive message event to wait for the response...




subprocess - 
subprocess is a group of elements or flow nodes that make up a child process used within the large parent process..usually the elements in the subprocess contained within the rounded rectangular similar to a task...
why use subprocesses ? - subprocesses encapsulates complexity processes that represents high level and low level detail at a single heirachy can sometimes be overweling and confusing...subprocesses helps to simplify the process by encapsulating the groups of process elements into their own seperate scope..these groups can be collapse to the size of a task which makes it easier to read the process from the parent level.....subprocesses can also help to modularize and organize your processes..subprocesses allows u to attach events to a specific scope..
there are different types of tasks.they are :
embedded subprocesses
call activity("reusable subprocesses")
transaction subprocesses
ad-hoc subprocesses
event subprocesses



embedded or nested subprocesses - it is contained within an excessable from the parent process....it shares the same set of data from its parent processes...in the parent process it is handled like a task this means that the subprocesses starts when the token arrives from the parent process..this is the only way the subprocess starts..it can't be started from outside such as message event ot timed event...it only begins when the token arrives from the parent process...it stays active as long as any element contained within it is active...when the last element is completed then the subprocess is completed...then the token moves through the outgoing flow and comtinues through the parent processes.. 
note: embedded subprocesses must always have one none start event or start from the none events..


collapse subprocesses - 
they hide the details of the subprocess from the parent view...this is useful when a high level view of a parent process..without reveling the lower level of the subprocess...



call acticity - they are referred to as resuable subprocesses...they contain the same subprocesses,but store in seperate bpmn diagram..they can be shared across teams and managed by multiple team member,which promotes collaboration and distributed ownership,reduces dependencies on any single person or team..they do not inherit data from the parent process..a call acctivity needs data to be passed to it...


BPMN artifacts - it include annotations and groups...they add valuable information to process diagram,it does not effect the flow...artifacts does not effect the sequence flow...


annotations - add descriptive text to diagrams...used to supplement diagrams..should not replace the process documentation...provide insight into the execution of tasks....
purpose of annotations - to provide textual description that can give more context to a model element..annotations serves as a means to add descriptive text or explaination to elements wiithin a BPMN diagram...


groups - they organize elements within our diagram and won't change the sequencial flow...do not influence execution semantics..can be applied across pool boundaries...markoff parts of your models which only certain conventions apply..groups are about the characterization and analytics...they are the visual marker used for organizational purpose and have no impact on the execution..groups are used to visually categorize or cluster elements within a bpmn diagram...


data objects - it represents any kind of data that is relevent for this process instance..data objects should be connected to flow nodes using associations..
purpose of data objects - to indicate where data is needed and how it flows between tasks within the process...represents information that is input into,output from,or transformed within the process...


collection data objects - modification of a regular data object...used when you need to handle multiple instances of the same datatype..


data stores - they are the type of stores that allows data to be persistently stored like a database...they are typically shared and accessed by multiple processes or instances and can be accessed or updated by activities within the process...they provide the mechanism for storing data that persists on the line of the process....data stores are connected to activities through association lines,indicating the flow of data into and out of the store...
purpose of data stores - to show where the data is stored for long ter, access or where multiple process instances might access or update the same data...to indicate the reuse of data across different processes or different instances of the same process...symbolizes a storage location for data that persistes beyond the life of the process....




BPMN error events -
there are cases where error occurs and when that occurs then we have to use error event for handling errors...
error event -
Error events in Camunda 8 are used to handle business errors or technical failures that occur during process execution.
 an error event is a bpmn element represented as a flash symbol..it reacts to an error that occur in an activity such as a task or a subprocess or call activty when it can't complete due to error that you have defined for it..it is considered as serious because it interupts the activity it is attached to which means the processinstance will not continue pass but instead go to another path which u have defined....like other event the error events can be thowing event or a cathching event..the error can be thrown in any activity.....
in order to model the error expecitly in your process..we would use a throw event...error throw event modeled as an end event for a subprocess or call activity and typically it include the 

when to use error events -
when the activity cannot be completed..and the error happens during activity execution,requires a business reaction,occurs offen and repeatedly...

note : be selective when modeling error events so that your process remains uncluttered..


Error catch events :
An Error Catch Event is used to catch an error thrown within a process and take corrective action.
Types of Error Catch Events:
Error Boundary Event (Attached to a Task or Subprocess)
Placed on the boundary of a BPMN task or subprocess.
Interrupts the task/subprocess if an error occurs.
Redirects the process to an alternative path.
Error Start Event (Inside an Event Subprocess)
Triggers a new event subprocess when a specific error occurs.
Can handle errors globally within the scope of the main process.


Error throw events :
An Error Throw Event is used to explicitly signal that an error has occurred.it is an active event to throw an error..
Types of Error Throw Events:
Error Intermediate Throw Event
Used within a process to indicate an error.
The thrown error must be caught by an error catch event.
Error End Event
Ends the process abnormally by throwing an error.
Can be caught by an Error Boundary Event or an Error Start Event.




escalation events :
Escalation events in Camunda 8 are used to signal a non-critical issue that needs attention but does not terminate the process. Unlike Error Events, which indicate failures, Escalation Events allow a process to handle exceptional situations while continuing execution.it is a bpmn element which is represented as a upward symbol..it is used for communication between parent and subprocess levels(vertical communication)..unlike other events escalation events are non critical because they don't necessarily interupt the process..they indicate that information needs to be send to a higher scope level in the process...unlike error events escalation events can be thrown and caught..



DMN(decision management and notation) - 
it is a standard notation developed by object management group(OMG) and widely used in different industries....DMN defines the desicion logic in a visual way,working alongside BPMN...in DMN,decision means derive a result(output) from given facts..

DRD(decision requirement diagram) - theya are visualize as disicion requirement diagram..when starting to model a decision it is important to start with drd because it defines with the structure of the decision....


decision logic - it defines the roles in the decision..the most common way to model the decision logic is by decision table..
dmn comes with its own expression logic feel(friendly enough expression language)...with both drd(decision requirement diagram) and decision logic it is easy tho define the logic of the decision..



FEEL(friendly enough expression language) - it is the part of th4e DMN specification of the object management group..it is designed to write the expression for decision table and literal expressions in a way that is easy top understand business professionals and developers..everything begins with datatypes and it has several datatypes..
string - this is a text value ,a sequence of characters enclosed in double quotes..eg: "audi"
number - this can be any kind of number like integer(1) or floats(2.34)..the numbver can be negative...
boolean -this can have only two values - true and false..
Date - 
A date value without a time component.
Format: yyyy-MM-dd.
Java Type: java.time.LocalDate
date("2017-03-10")
eg: @"2017-03-10"
Time -
A local or zoned time. The time can have an offset or time zone id.
Format: HH:mm:ss / HH:mm:ss+/-HH:mm / HH:mm:ss@ZoneId
Java Type: java.time.LocalTime / java.time.OffsetTime
time("11:45:30")
Date-time - 
A date with a local or zoned time component. The time can have an offset or time zone id.
Format: yyyy-MM-dd'T'HH:mm:ss / yyyy-MM-dd'T'HH:mm:ss+/-HH:mm / yyyy-MM-dd'T'HH:mm:ss@ZoneId
Java Type: java.time.LocalDateTime / java.time.DateTime
date and time("2015-09-18T10:31:10")
Days-time-duration -
A duration based on seconds. It can contain days, hours, minutes, and seconds.
Format: PxDTxHxMxS
Java Type: java.time.Duration
duration("P4D")
Years-months-duration
A duration based on the calendar. It can contain years and months.
Format: PxYxM
Java Type: java.time.Period
duration("P2Y")
List -
A list of elements. The elements can be of any type. The list can be empty.
Java Type: java.util.List
[]
[1,2,3]
["a","b"]
Context -
A list of entries. Each entry has a key and a value. The key is either a name or a string. The value can be any type. The context can be empty.
Java Type: java.util.Map
{}
{a:1}
{b: 2, c: "valid"}


unary-tests in feel -
unary tests is a special kind of boolean expression..it should be used for input entries of decision table(i.e the condition of a rule)
A unary-tests expression returns true if one of the following conditions is fulfilled:
The expression evaluates to true when the input value is applied to the unary operators.
The expression evaluates to true when the input value is assigned to the special variable ?.
The expression evaluates to a value, and the input value is equal to that value.
The expression evaluates to a list, and the input value is equal to at least one of the values.
The expression is equal to - (a dash).
Comparison
Compares the input value with a given value. The input value is passed implicitly as the first argument of the operator.
Both values must be of the same type. Otherwise, the result is null.
Operator	Description	Supported types
(none)	equal to	any
<	less than	number, date, time, date-time, duration
<=	less than or equal to	number, date, time, date-time, duration
>	greater than	number, date, time, date-time, duration
>=	greater than or equal	number, date, time, date-time, duration


Interval -
Checks if the input value is within a given interval between x and y.
An interval has two boundaries that can be open (x..y) / ]x..y[ or closed [x..y]. If a boundary is closed, it includes the given value (i.e. less/greater than or equal). Otherwise, it excludes the value (i.e. less/greater than).
The input value is passed implicitly to the operator.
(2..5)
// input > 2 and input < 5

]2..5[
// input > 2 and input < 5

[2..5]
// input >= 2 and input <= 5

(2..5]
// input > 2 and input <= 5

Disjunction/or -
Combines multiple unary-test expressions following the ternary logic.
Returns true if at least one unary-test evaluates to true.
Otherwise, it returns false.
2, 3, 4
// input = 2 or input = 3 or input = 4
< 10, > 50
// input < 10 or input > 50

Negation/not -
Negates a given unary-test expression. The expression can be a comparison, an interval, or a disjunction.
It returns true if the given unary-test evaluates to false.
not("valid")
// input != "valid"
not(2, 3)
// input != 2 and input != 3


https://docs.camunda.io/docs/components/modeler/feel/language-guide/feel-boolean-expressions/
this url contain the docs about the feel expression


expressions - general expression that can return values of different types..they can uesd everywhere..



Manual task - 
it is an external to zeebe engine..it is used to model work done by somebody who the engine does not know of that and that has unknown system or ui interface...it is also considered as  a pass through activity,automatically continuing when the process execution arrives at it..


camunda forms -
they are used to create camunda forms using moduler...they are used in conjunction with user tasks and can be displayed in tasklist..they will be going through the three different nodes...they are : code editor mode,validate mode,design mode
design mode - which is used for designing the form..this si the default mode where we create a new form..there are three section in form..they are
 components,form defination and form preview..
in components we have input,selection,presentation,containers and action..
in form definition u build the visual aspect of your form in the form defination section..

form preview - 
in form preview you interact with a form and see how it looks and behaves with mock data that simulates what an end user sees in tasklist...
in form preview we have disabled and read only where disabled means any data in the field will not be submitted with the form and will not be seen where as read only will have data where we can only read 
fx in form preview - it means the field can be use as a feel expression..


validate mode - which is used for testing
code editor mode -  which is used to see the code..


milestones functoionality - 
shows the milestones that you set for the form..



components -
components are the elements that make up a form and define its structure...
input section - these elements allow you to display and/or manually enter data into the form..
text field - this is used to display,modify or create data stored in a process variable..
selection catagory -this allows the user of the form to make choices that will altimately change the data related to the form..

note : the options can be created statically and dynamically voted from the input data.....

presentation section -
this will help u display data headings or any other data in the form..these elements are typically read only...

container section - this section allows u to group elements together or in the case of iframe embed external content into your form..

action element - we will use this to either trigger a form submssion or reset the form itself....

field element - this typically serves as a heading or title for the field itself...
field description - this will allows u to add additional details..
key field - this refers to the data this element is interacting with..if u change the value in the text field it modifies the value stored in the process variable....in this way you can read and write to a process variable through form element..
disabled button - this element can still be edited but the data in the field will not be submitted...
default value - you can create default value which allows the elements to use a specific value..until one is written or choosen..
custom properties - this will allow you to set the property value that can be used in the execution of the swarm.. this is often used by custom task list implementaions to customize the form..










IN SAAS WE CAN CREATE ONLY ONE CLUSTER...IF WE CREATE ONE CLUSTER WE CANNOT CREATE ANOTHER ONE AS IT WILL AUTOMATICALLY BE DISABELED..



OPERATOR - 
IT IS A TOOL FOR MONITORING AND TROUBLESHOOTING PROCESS INSTANCES RUNNING IN THE ZEEBE ENGINE..IN ADDITION TO PROVIDING VISIBILITY INTO ACTIVE AND COMPLETED PROCESS INSTANCE, OPERATE ALSO MAKES IT POSSIBLE TO CARRY OUT KEY OPERATIONS SUCH AS RESOLVING INCIDENTS, AND UPDATING PROCESS INSTANCE VARIABLE...






