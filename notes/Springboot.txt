apache poi is an opensourses java library to create and manipulate various file formats.
because java doesn't have build in support for working with excel files.it has several classes and methods 
to work with excel files.like hssf and xssf api which provides the mechanism to read,write and modify excel
spreadsheets.
apache poi contains components like workbook,sheet,row,cell..using workboot we can create a workbook and using 
sheet we can create a sheet based on the index and inside the sheet we can create the rows and when the row is 
created in that row we can create a cell and inside the cell we can set the cell data..






multithreading in java:

multiththreading is the ability of the cpu to perform multiple tasks concurrently..
process:
process is a instance of program execution.An independent executing instance of a program.
Processes operate independently, with each having its own:
Memory space (address space).
State (e.g., running, waiting, or terminated).
it Requires inter-process communication (IPC) like pipes, sockets, or shared memory.
One process crashing does not affect others.


Role of Processes in Multithreading:
Every multithreaded application runs within a single process.
Threads exist within a process, sharing its resources like memory, files, and sockets.
Real-World Example: Web Browsers
A browser (e.g., Chrome, Firefox) uses processes and threads:
Processes:
Each tab is a separate process to isolate crashes (one tab crashing doesn't bring down others).
Threads:
Each tab's process may have multiple threads:
One for rendering.
One for JavaScript execution.
One for network requests.
Advantages of Using Processes with Threads
Fault Isolation:
A process crash doesn‚Äôt affect others, even if it contains multiple threads.
Parallel Execution:
Processes can run on different CPUs, while threads share the CPU cores.
Security:
Processes are more secure due to memory isolation.



threads in java:
A thread is the smallest unit of execution within a process. It is a lightweight sub-process that 
shares the process's memory and resources while performing its tasks independently. In a multithreading 
context, multiple threads run concurrently within a single process.each threqad in th eprocess share 
the same memory and resources..

Thread Lifecycle
Threads in Java go through several states during their lifecycle:
New: A thread is created but not yet started (using new Thread()).
Runnable: The thread is ready to run but waiting for CPU time (after start() is called).
Running: The thread is executing its task.
Blocked/Waiting: The thread is waiting for a resource or signal.
Terminated: The thread has completed execution.

Why Use Threads?
Threads enable a program to perform multiple tasks concurrently, improving efficiency and responsiveness.
Thread Methods
start(): Starts the thread and invokes the run() method.
run(): The entry point for the thread's execution.
join(): Waits for a thread to finish its execution.
sleep(long millis): Puts the thread to sleep for a specified time.
yield(): Suggests to the thread scheduler to pause the current thread and allow other threads to execute.
isAlive(): Checks if the thread is still active.

Thread Priorities
Threads can have priorities between 1 (MIN_PRIORITY) and 10 (MAX_PRIORITY). The default priority is 5 
(NORM_PRIORITY). The thread scheduler may use these priorities to decide which thread to execute next.

Real-World Example
Online Shopping Cart:
A thread handles user interactions with the cart.
Another thread processes payment.
A third thread updates inventory after a purchase.
Threads enable these tasks to run concurrently, ensuring a smooth user experience.






SOLID PRINCIPLES:
single responsibility : whatever classes u create should have single responsibility and that should be followed by that class

Open-closed principles : any class or interface that you create should not be open fo rmodification.it should be closed for modification.whenever u need extra functionality to add then u can extend the class and then u can add any other functionality

liskov substitution : whenever you are creating parent child relationship so that parent class and subtype class so both class should be interchangeble and should be substitutable so that means whenever i pass the object of the child or whenever i pass the object of parent it should work..



VOLATILE :
The volatile keyword in Java is used to ensure that updates to a variable are always visible to other threads.
It tells the JVM and the compiler:
* Don‚Äôt cache this variable.
* Always read and write its value directly from main memory.
üîç Problem Without volatile
‚ùå Without volatile, this may happen:
* One thread updates the variable.

Other threads don't see the updated value, because they read it from their cached copy in CPU register or thread-local memory.
Using volatile is yet another way (like synchronized, atomic wrapper) of making class thread-safe. Thread-safe means that a method or class instance can be used by multiple threads at the same time without any problem.Suppose that two threads are working on SharedObj. If two threads run on different processors each thread may have its own local copy of sharedVariable. If one thread modifies its value the change might not reflect in the original one in the main memory instantly. Now the other thread is not aware of the modified value which leads to data inconsistency.  Volatile variables have the visibility features of synchronized but not the atomicity features. The values of the volatile variable will never be cached and all writes and reads will be done to and from the main memory. However, the use of volatile is limited to a very restricted set of cases as most of the times atomicity is desired.



DEADLOCK :
A deadlock is a situation where two or more threads are waiting for each other to release locks, and none of them ever proceeds.
üîß Real-World Analogy
Imagine:
Thread A locks Resource 1 and waits for Resource 2.
Thread B locks Resource 2 and waits for Resource 1.
Both are stuck forever = Deadlock



REENTRANTLOCK :
ReentrantLock in Java is a part of the java.util.concurrent package that helps to achieve synchronization more effectively and optimally compared to the traditional Synchronized keyword. A ReentrantLock allows a thread to acquire the same lock multiple times, which is particularly useful when a thread needs to access a shared resource repeatedly within its execution. It implements the Lock interface, providing greater control over locking compared to synchronized blocks.
* ReentrantLock tracks a "hold count", which:
* Starts at 1 when a thread first locks the resource.
* Each time the thread re-enters the lock, the count is incremented.
* The count is decremented when the lock is released.
* Once the hold count reaches zero, the lock is fully released.



THREADPOOLTASKEXECUTOR :
üß† What Does ‚ÄúUsing Thread Pool‚Äù Mean?
When you use threads in Java (like new Thread()), every task runs in a separate thread ‚Äî unmanaged and potentially expensive in terms of memory.
Instead, you use a thread pool ‚Äî a group of pre-created reusable threads managed by Spring ‚Äî to:
Efficiently execute multiple tasks concurrently
Avoid creating too many threads and crashing the app
Control how many threads run in parallel


