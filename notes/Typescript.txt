statement that TypeScript is a superset of JavaScript, but it's not like it is adding more features

to JavaScript. No, it doesn't give you more of callbacks. It doesn't give you more of arrow
function. It just allows you to write JavaScript in a much precise manner so that your code

faces a lot less error in the runtime. If there is any error, it is already being displayed to you

while writing the code at the kind of when you're just typing them out in the your favorite editor,

maybe VS code or something. That is where we want to just catch those error and find that we

shouldn't be doing something like that. So that is all your TypeScript. It is not going to give you






 And at that time, you just say, ah, that's wrong. And you need to
rerun the code itself. But it would be really a great help if there is a static checker which

checks my code as I try to write it. For example, I'm trying to access an object which is not yet

defined. If something can analyze my code and can give me a hint that that object doesn't exist

in the object properties, then obviously it's much more easier for me. 
TypeScript is just for static checking. It just analyze your code and help you to understand that

you might be running into a potential error without even running the code and getting the errors
at the runtime itself. That's all it does. So I hope you understand that. The whole job of the
TypeScript is simply to analyze the code. That's it. That's all it does



what typescript does?
The simple idea behind the TypeScript is static checking.static checking which is used in many language like golang,java eyc.static checking means that whenever you are writting the code,the parser of the language or the entire syntax of the language is constantlybeing analysed by the ide..but not in case of javascript..whatever u write is just okey for javascript and when the code executes in te browser or engine like node environmentthen only the errors of javascript are thrown at your face..
typescript is a development tool,it helps you to write better code with less problems with more scalable and maintainable code that is easily available and the chances of producing the error is much more less..


                                                                          STRING METHODS -
    * charCodeAt - 
charCodeAt() is a string method that returns the Unicode code point (a number) of the character at a specific position in a string.
SYNTAX - string.charCodeAt(index: number): number
COMMON USE CASES:
Character validation (checking if it's a letter, number, etc.)
Encryption/encoding operations
Sorting strings in a specific order
Converting between characters and their numeric representations
    *  codePointAt -
codePointAt() is a string method that returns the Unicode code point of the character at a specific position, with better support for characters outside the basic range compared to charCodeAt().
Syntax - string.codePointAt(index: number): number | undefined
Key Differences from charCodeAt() -
charCodeAt() only handles characters in the Basic Multilingual Plane (0-65535)
codePointAt() can handle the full Unicode range, including emojis and special characters
codePointAt() returns undefined for invalid indices (vs NaN for charCodeAt())
When to Use Each Method
Use codePointAt() when:
Working with emojis, symbols, or international characters
You need the actual Unicode code point value
Building Unicode-aware text processing functions
Use charCodeAt() when:
Working only with basic ASCII/Latin characters
You need the legacy UTF-16 code unit values
Working with older codebases that expect charCodeAt() behavior
# Complete TypeScript String Methods Guide

## 1. Character Access Methods

### charAt(index: number): string
Returns the character at the specified index. Returns empty string if index is out of bounds.

```typescript
const text = "Hello";
console.log(text.charAt(0)); // "H"
console.log(text.charAt(10)); // "" (empty string)
console.log(text.charAt(-1)); // "" (empty string)
```

### charCodeAt(index: number): number
Returns the Unicode code unit (0-65535) at the specified index. Returns NaN if out of bounds.

```typescript
const text = "Hello";
console.log(text.charCodeAt(0)); // 72 (Unicode for 'H')
console.log(text.charCodeAt(1)); // 101 (Unicode for 'e')
console.log(text.charCodeAt(10)); // NaN
```

### codePointAt(index: number): number | undefined
Returns the Unicode code point at the specified index. Better for handling emojis and special characters.

```typescript
const text = "HelloðŸ˜€";
console.log(text.codePointAt(5)); // 128512 (emoji code point)
console.log(text.codePointAt(10)); // undefined
```

## 2. Search Methods

### indexOf(searchString: string, position?: number): number
Returns the first index of the search string, or -1 if not found.

```typescript
const text = "Hello World Hello";
console.log(text.indexOf("Hello")); // 0
console.log(text.indexOf("Hello", 5)); // 12 (search from index 5)
console.log(text.indexOf("xyz")); // -1
```

### lastIndexOf(searchString: string, position?: number): number
Returns the last index of the search string, or -1 if not found.

```typescript
const text = "Hello World Hello";
console.log(text.lastIndexOf("Hello")); // 12
console.log(text.lastIndexOf("Hello", 5)); // 0 (search backwards from index 5)
console.log(text.lastIndexOf("xyz")); // -1
```

### search(regexp: string | RegExp): number
Searches for a match using a regular expression. Returns index or -1.

```typescript
const text = "Hello World 123";
console.log(text.search("World")); // 6
console.log(text.search(/\d+/)); // 12 (finds digits)
console.log(text.search(/xyz/)); // -1
```

### includes(searchString: string, position?: number): boolean
Checks if the string contains the search string.

```typescript
const text = "Hello World";
console.log(text.includes("World")); // true
console.log(text.includes("world")); // false (case sensitive)
console.log(text.includes("llo", 2)); // true (search from index 2)
```

### startsWith(searchString: string, position?: number): boolean
Checks if the string starts with the search string.

```typescript
const text = "Hello World";
console.log(text.startsWith("Hello")); // true
console.log(text.startsWith("World")); // false
console.log(text.startsWith("World", 6)); // true (check from index 6)
```

### endsWith(searchString: string, length?: number): boolean
Checks if the string ends with the search string.

```typescript
const text = "Hello World";
console.log(text.endsWith("World")); // true
console.log(text.endsWith("Hello")); // false
console.log(text.endsWith("Hello", 5)); // true (consider only first 5 chars)
```

## 3. Extraction Methods

### slice(start: number, end?: number): string
Extracts a section of the string. Supports negative indices.

```typescript
const text = "Hello World";
console.log(text.slice(0, 5)); // "Hello"
console.log(text.slice(6)); // "World"
console.log(text.slice(-5)); // "World" (last 5 chars)
console.log(text.slice(-5, -1)); // "Worl"
```

### substring(start: number, end?: number): string
Similar to slice but doesn't support negative indices (treats them as 0).

```typescript
const text = "Hello World";
console.log(text.substring(0, 5)); // "Hello"
console.log(text.substring(6)); // "World"
console.log(text.substring(-5)); // "Hello World" (treats -5 as 0)
console.log(text.substring(5, 0)); // "Hello" (swaps arguments if start > end)
```

### substr(start: number, length?: number): string
**Deprecated** - Extracts characters starting from start position for specified length.

```typescript
const text = "Hello World";
console.log(text.substr(0, 5)); // "Hello"
console.log(text.substr(6, 3)); // "Wor"
console.log(text.substr(-5, 3)); // "Wor"
```

## 4. Modification Methods (Return New Strings)

### concat(...strings: string[]): string
Concatenates strings together.

```typescript
const text = "Hello";
console.log(text.concat(" ", "World")); // "Hello World"
console.log(text.concat("!", "??")); // "Hello!??"
// Preferred: use template literals or + operator
console.log(`${text} World`); // "Hello World"
```

### repeat(count: number): string
Repeats the string specified number of times.

```typescript
const text = "Hello";
console.log(text.repeat(3)); // "HelloHelloHello"
console.log("*".repeat(5)); // "*****"
console.log(text.repeat(0)); // ""
```

### padStart(targetLength: number, padString?: string): string
Pads the string from the start to reach target length.

```typescript
const text = "5";
console.log(text.padStart(3, "0")); // "005"
console.log(text.padStart(5)); // "    5" (default pad is space)
console.log("Hello".padStart(10, "*")); // "*****Hello"
```

### padEnd(targetLength: number, padString?: string): string
Pads the string from the end to reach target length.

```typescript
const text = "5";
console.log(text.padEnd(3, "0")); // "500"
console.log(text.padEnd(5)); // "5    " (default pad is space)
console.log("Hello".padEnd(10, "*")); // "Hello*****"
```

## 5. Case Conversion Methods

### toLowerCase(): string
Converts string to lowercase.

```typescript
const text = "Hello WORLD";
console.log(text.toLowerCase()); // "hello world"
console.log("TYPESCRIPT".toLowerCase()); // "typescript"
```

### toUpperCase(): string
Converts string to uppercase.

```typescript
const text = "Hello world";
console.log(text.toUpperCase()); // "HELLO WORLD"
console.log("typescript".toUpperCase()); // "TYPESCRIPT"
```

### toLocaleLowerCase(locales?: string | string[]): string
Converts to lowercase using locale-specific rules.

```typescript
const text = "Ä°STANBUL"; // Turkish
console.log(text.toLocaleLowerCase("tr-TR")); // "istanbul"
console.log(text.toLocaleLowerCase("en-US")); // "iÌ‡stanbul"
```

### toLocaleUpperCase(locales?: string | string[]): string
Converts to uppercase using locale-specific rules.

```typescript
const text = "istanbul";
console.log(text.toLocaleUpperCase("tr-TR")); // "Ä°STANBUL"
console.log(text.toLocaleUpperCase("en-US")); // "ISTANBUL"
```

## 6. Trimming Methods

### trim(): string
Removes whitespace from both ends.

```typescript
const text = "  Hello World  ";
console.log(text.trim()); // "Hello World"
console.log("  \n\t  Hello  \n\t  ".trim()); // "Hello"
```

### trimStart() / trimLeft(): string
Removes whitespace from the beginning.

```typescript
const text = "  Hello World  ";
console.log(text.trimStart()); // "Hello World  "
console.log(text.trimLeft()); // "Hello World  " (alias)
```

### trimEnd() / trimRight(): string
Removes whitespace from the end.

```typescript
const text = "  Hello World  ";
console.log(text.trimEnd()); // "  Hello World"
console.log(text.trimRight()); // "  Hello World" (alias)
```

## 7. Split and Replace Methods

### split(separator?: string | RegExp, limit?: number): string[]
Splits string into array of substrings.

```typescript
const text = "apple,banana,orange";
console.log(text.split(",")); // ["apple", "banana", "orange"]
console.log(text.split(",", 2)); // ["apple", "banana"]
console.log("Hello World".split(" ")); // ["Hello", "World"]
console.log("Hello".split("")); // ["H", "e", "l", "l", "o"]
console.log(text.split()); // ["apple,banana,orange"] (no split)
```

### replace(searchValue: string | RegExp, replaceValue: string): string
Replaces first occurrence of search value.

```typescript
const text = "Hello World Hello";
console.log(text.replace("Hello", "Hi")); // "Hi World Hello"
console.log(text.replace(/Hello/g, "Hi")); // "Hi World Hi" (global replace)
console.log(text.replace(/hello/i, "Hi")); // "Hi World Hello" (case insensitive)
```

### replaceAll(searchValue: string | RegExp, replaceValue: string): string
Replaces all occurrences of search value.

```typescript
const text = "Hello World Hello";
console.log(text.replaceAll("Hello", "Hi")); // "Hi World Hi"
console.log(text.replaceAll(/l/g, "L")); // "HeLLo WorLd HeLLo"
// Note: RegExp must have global flag for replaceAll
```

## 8. Regular Expression Methods

### match(regexp: RegExp): RegExpMatchArray | null
Matches against a regular expression.

```typescript
const text = "Hello World 123";
console.log(text.match(/\d+/)); // ["123", index: 12, input: "Hello World 123"]
console.log(text.match(/\d+/g)); // ["123"]
console.log(text.match(/xyz/)); // null
```

### matchAll(regexp: RegExp): IterableIterator<RegExpMatchArray>
Returns iterator of all matches (regexp must have global flag).

```typescript
const text = "test1 test2 test3";
const matches = text.matchAll(/test(\d)/g);
for (const match of matches) {
    console.log(match); // ["test1", "1", ...], ["test2", "2", ...], etc.
}
```

## 9. Conversion Methods

### toString(): string
Returns string representation (usually same as the string itself).

```typescript
const text = "Hello";
console.log(text.toString()); // "Hello"
console.log(String(123).toString()); // "123"
```

### valueOf(): string
Returns primitive string value.

```typescript
const text = new String("Hello");
console.log(text.valueOf()); // "Hello"
console.log(typeof text.valueOf()); // "string"
```

## 10. Locale-Specific Methods

### localeCompare(that: string, locales?: string | string[], options?): number
Compares strings according to locale rules.

```typescript
const text1 = "apple";
const text2 = "banana";
console.log(text1.localeCompare(text2)); // -1 (apple comes before banana)
console.log(text2.localeCompare(text1)); // 1 (banana comes after apple)
console.log(text1.localeCompare(text1)); // 0 (equal)

// With locale options
console.log("Ã¤".localeCompare("z", "en", { sensitivity: 'base' })); // -1
```

### normalize(form?: "NFC" | "NFD" | "NFKC" | "NFKD"): string
Returns Unicode normalized form of the string.

```typescript
const text = "cafÃ©"; // Ã© as separate characters
const normalized = text.normalize("NFC"); // Ã© as single character
console.log(text.length); // May be 5
console.log(normalized.length); // 4
```

## 11. Static Methods

### String.fromCharCode(...codes: number[]): string
Creates string from Unicode code units.

```typescript
console.log(String.fromCharCode(72, 101, 108, 108, 111)); // "Hello"
console.log(String.fromCharCode(65, 66, 67)); // "ABC"
```

### String.fromCodePoint(...codePoints: number[]): string
Creates string from Unicode code points (better for emojis).

```typescript
console.log(String.fromCodePoint(72, 101, 108, 108, 111)); // "Hello"
console.log(String.fromCodePoint(128512)); // "ðŸ˜€"
console.log(String.fromCodePoint(0x1F600)); // "ðŸ˜€"
```

### String.raw(template: TemplateStringsArray, ...substitutions: any[]): string
Returns raw string form of template literals.

```typescript
console.log(String.raw`Hello\nWorld`); // "Hello\\nWorld" (literal backslash)
console.log(`Hello\nWorld`); // "Hello" (newline) "World"

// With substitutions
const name = "John";
console.log(String.raw`Hello ${name}\nHow are you?`); // "Hello John\\nHow are you?"
```

## 12. Property

### length: number
Read-only property that returns the length of the string.

```typescript
const text = "Hello";
console.log(text.length); // 5
console.log("".length); // 0
console.log("Hello ðŸ˜€".length); // 8 (emoji counts as 2)
```

## Practical Examples

### Example 1: Email Validation
```typescript
function isValidEmail(email: string): boolean {
    return email.includes("@") && 
           email.indexOf("@") !== 0 && 
           email.lastIndexOf("@") === email.indexOf("@") &&
           email.endsWith(".com") || email.endsWith(".org");
}

console.log(isValidEmail("user@example.com")); // true
console.log(isValidEmail("invalid-email")); // false
```

### Example 2: String Formatting
```typescript
function formatName(firstName: string, lastName: string): string {
    return `${firstName.trim().charAt(0).toUpperCase()}${firstName.trim().slice(1).toLowerCase()} ${lastName.trim().toUpperCase()}`;
}

console.log(formatName("  john  ", "  doe  ")); // "John DOE"
```

### Example 3: Text Processing
```typescript
function processText(text: string): object {
    const words = text.toLowerCase().split(/\s+/).filter(word => word.length > 0);
    const wordCount = words.length;
    const charCount = text.length;
    const charCountNoSpaces = text.replace(/\s/g, "").length;
    
    return {
        words: wordCount,
        characters: charCount,
        charactersNoSpaces: charCountNoSpaces,
        averageWordLength: wordCount > 0 ? (charCountNoSpaces / wordCount).toFixed(2) : 0
    };
}

console.log(processText("Hello World! How are you?"));
// { words: 5, characters: 23, charactersNoSpaces: 18, averageWordLength: "3.60" }
```

## TypeScript-Specific Notes

1. **Type Safety**: TypeScript provides compile-time checking for string method usage
2. **Template Literals**: Preferred over concatenation for readability
3. **Optional Chaining**: Use `?.` when string might be undefined
4. **Strict Null Checks**: Consider that some methods return `null` or `undefined`

```typescript
// TypeScript examples
function safeStringOperation(text: string | undefined): string {
    return text?.trim().toLowerCase() ?? "default";
}
// Template literal types (advanced)
type EmailDomains = "gmail.com" | "yahoo.com" | "hotmail.com";
type Email<T extends string> = `${string}@${T}`;
const email: Email<EmailDomains> = "user@gmail.com"; // Type safe




















