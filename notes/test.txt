ordercontroller class:

package com.example.controller;

import com.example.entity.Orders;
import com.example.repo.OrdersRepo;
import com.example.service.OrderService;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@Controller
@CrossOrigin(origins="*")
public class OrderController {
    @Autowired
    OrderService orderService;

    @Autowired
    private OrdersRepo orderRepo;

    @PostMapping(value="/createOrder", produces="application/json")
    @ResponseBody
  public ResponseEntity<Orders> createdOrders(@RequestBody Orders orders) throws Exception {
      Orders createdOrder= orderService.createOrder(orders);
      return new  ResponseEntity<>(createdOrder, HttpStatus.CREATED);
  }
  @GetMapping("/")
    public String init()
  {
      return "index";
  }



  //this api is used to update the order status by razorpay order id
    @PostMapping("/updateOrderStatus")
    @ResponseBody
    public ResponseEntity<String> updateOrderStatus(@RequestBody Map<String, String> request) {
        String orderId = request.get("orderId");
        String status = request.get("status");

        Orders order = orderRepo.findByRazorPayOrderId(orderId);
        if (order != null) {
            order.setOrderStatus(status);
            orderRepo.save(order);
            return new ResponseEntity<>("Order status updated", HttpStatus.OK);
        } else {
            return new ResponseEntity<>("Order not found", HttpStatus.NOT_FOUND);
        }
    }


    @PostMapping("/webhook/razorpay")
    @ResponseBody
    public ResponseEntity<String> handlePaymentStatusUpdate(
            @RequestBody String payload,
            @RequestHeader("X-Razorpay-Signature") String razorpaySignature) {
        try {
            // Verify webhook signature
            OrderService webhookService = new OrderService();
            String secret = "your-razorpay-webhook-secret";
            boolean isValidSignature = webhookService.verifyWebhookSignature(payload, razorpaySignature, secret);

            if (!isValidSignature) {
                return new ResponseEntity<>("Invalid webhook signature", HttpStatus.UNAUTHORIZED);
            }

            JSONObject webhookPayload = new JSONObject(payload);
            String event = webhookPayload.getString("event");
            JSONObject paymentDetails = webhookPayload.getJSONObject("payload").getJSONObject("payment").getJSONObject("entity");

            String razorpayOrderId = paymentDetails.getString("order_id");
            String paymentStatus = paymentDetails.getString("status");

            if ("payment.captured".equals(event)) {
                Orders order = orderRepo.findByRazorPayOrderId(razorpayOrderId);

                if (order != null) {
                    // Update order details
                    order.setOrderStatus(paymentStatus);
                    order.setRazorPayPaymentId(paymentDetails.getString("id"));
                    order.setPaymentMethod(paymentDetails.getString("method"));
                    order.setCurrency(paymentDetails.getString("currency"));
                    order.setAmount(paymentDetails.getInt("amount") / 100); // Amount in smallest unit, dividing by 100

                    // Set additional details based on payment method
                    if (paymentDetails.has("bank")) {
                        order.setBank(paymentDetails.getString("bank"));
                    }
                    if (paymentDetails.has("wallet")) {
                        order.setWallet(paymentDetails.getString("wallet"));
                    }
                    if (paymentDetails.has("vpa")) {
                        order.setVpa(paymentDetails.getString("vpa"));
                    }

                    // Save updated order details to the database
                    orderRepo.save(order);

                    return new ResponseEntity<>("Order details updated successfully", HttpStatus.OK);
                } else {
                    return new ResponseEntity<>("Order not found", HttpStatus.NOT_FOUND);
                }
            }

            return new ResponseEntity<>("Unhandled event", HttpStatus.BAD_REQUEST);
        } catch (Exception e) {
            return new ResponseEntity<>("Error processing webhook", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}



orders calas :


package com.example.entity;

import jakarta.persistence.*;
import jdk.jfr.DataAmount;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.RequiredArgsConstructor;

import java.util.Date;

@Entity
@Table(name="orderPayment")
@Data
@RequiredArgsConstructor

public class Orders {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO
    )
    private Integer orderId;
    private String name;
    private String email;
    private String phoneNumber;
    private String orderStatus;
    private Integer amount;
    private Date orderDate;
    private String razorPayOrderId;
    private String razorPayPaymentId; // Razorpay Payment ID
    private String paymentMethod; // e.g., card, netbanking
    private String bank; // Bank name for card or UPI
    private String wallet; // Wallet name, if used
    private String vpa; // Virtual Payment Address for UPI
    private String currency; // Payment currency, e.g., INR
}


ordersrepo :


package com.example.repo;

import com.example.entity.Orders;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface OrdersRepo extends JpaRepository<Orders,Integer> {
    Orders findByRazorPayOrderId(String razorPayOrderId);
}


orderservices class :

package com.example.service;

import com.example.entity.Orders;
import com.example.repo.OrdersRepo;

import com.razorpay.Order;
import com.razorpay.RazorpayClient;
import org.apache.commons.codec.binary.Hex;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Date;

@Service
public class OrderService {

    @Autowired
    OrdersRepo orderRepo;
    @Value("${razorpay.key.id}")
    private String razorPayKey;
    @Value("${razorpay.secret.key}")
    private String razorPaySecret;
    private RazorpayClient client;



    private static final String HMAC_SHA256 = "HmacSHA256";

    public boolean verifyWebhookSignature(String payload, String razorpaySignature, String secret) throws Exception {
        Mac sha256Hmac = Mac.getInstance(HMAC_SHA256);
        SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), HMAC_SHA256);
        sha256Hmac.init(secretKey);

        byte[] hash = sha256Hmac.doFinal(payload.getBytes());
        String expectedSignature = Hex.encodeHexString(hash);

        return expectedSignature.equals(razorpaySignature);
    }



    public Orders createOrder(Orders order) throws Exception {
        JSONObject orderReq = new JSONObject();
        orderReq.put("amount", order.getAmount() * 100);
        orderReq.put("currency", "INR");
        orderReq.put("receipt", order.getEmail());
        this.client = new RazorpayClient(razorPayKey, razorPaySecret);
        Order razorPayOrders= client.orders.create(orderReq);
        order.setRazorPayOrderId(razorPayOrders.get("id"));
        order.setOrderStatus(razorPayOrders.get("status"));
        order.setOrderDate(new Date());
        orderRepo.save(order);
        return order;
    }
}

index.html:

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap Payment Gateway</title>

    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container">
    <h1>Spring Boot Payment Gateway</h1>
    <table class="table">
        <tr>
            <td>Name:</td>
            <td>
                <input type="text" name="name" id="name" placeholder="enter name" class="form-control" required/>
            </td>
        </tr>
        <tr>
            <td>Email:</td>
            <td>
                <input type="text" name="email" id="email" placeholder="enter email" class="form-control" required/>
            </td>
        </tr>
        <tr>
            <td>Phone Number:</td>
            <td>
                <input type="number" name="phoneNumber" id="phoneNumber" placeholder="enter phone number" class="form-control" required/>
            </td>
        </tr>
        <tr>
            <td>Amount:</td>
            <td>
                <input type="text" name="amount" id="amount" placeholder="enter amount" class="form-control" />
            </td>
        </tr>
        <tr>
            <td></td>
            <td>
                <button id="rzp-button1" onclick="createOrder()">Proceed for Payment</button>
            </td>
        </tr>
    </table>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
<!--    async function createOrder() {-->
<!--      console.log("Create order triggered");-->
<!--      const response = await fetch("http://localhost:8082/createOrder",{-->
<!--          method:'POST',-->
<!--          headers:{-->
<!--              'Content-Type': 'application/json'-->
<!--          },-->
<!--          body: JSON.stringify({-->
<!--              name: document.getElementById('name').value,-->
<!--              email: document.getElementById('email').value,-->
<!--              phoneNumber: document.getElementById('phoneNumber').value,-->
<!--              amount: document.getElementById('amount').value,-->
<!--              currency: 'INR'-->
<!--          })-->
<!--      });-->

<!--      const order = await response.json();-->
<!--      console.log("Order creation completed");-->
<!--      console.log(order);-->
<!--  }-->

document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('rzp-button1').addEventListener('click', createOrder);
    });

     async function createOrder() {
        const name = document.getElementById('name').value;
        const email = document.getElementById('email').value;
        const phoneNumber = document.getElementById('phoneNumber').value;
        const amount = document.getElementById('amount').value;

        if (!name || !email || !phoneNumber || !amount || amount <= 0) {
                alert("Please fill all fields correctly.");
                return;
            }

        // Create the order on the backend
        const response = await fetch("http://localhost:8082/createOrder", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: name,
                email: email,
                phoneNumber: phoneNumber,
                amount: amount
            })
        });

        const order = await response.json();
        console.log("Order creation completed:", order);

        // Initiate Razorpay payment
        const options = {
            "key": "your-razorpay-key-id", // Replace with your Razorpay key ID
            "amount": order.amount * 100,  // Amount is in the smallest currency unit
            "currency": "INR",
            "name": order.name,
            "description": "Test Transaction",
            "image": "https://example.com/logo.png",  // Optional
            "order_id": order.razorPayOrderId,  // Order ID created in backend
            "handler": function (response) {
                alert("Payment successful! Payment ID: " + response.razorpay_payment_id);
                // Call your backend to update the payment details
            },
            "prefill": {
                "name": name,
                "email": email,
                "contact": phoneNumber
            },
            "theme": {
                "color": "#3399cc"
            }
        };

        const rzp1 = new Razorpay(options);
        rzp1.open();
    }
</script>
</body>
</html>


applcation.properties:


spring.application.name=PaymentGateway
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=narendra
spring.datasource.password=root
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
server.port=8082
spring.jpa.hibernate.ddl-auto=update
spring.jpa.showsql=true
razorpay.key.id=rzp_test_f0aOtbLVkyCYpW
razorpay.secret.key=CtqlYL8CjAWUOipcKFJqmSlq


porm.xml:


<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>PaymentGateway</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>PaymentGateway</name>
	<description>Demo project for Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.28</version>
			<scope>provided</scope>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc11</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>com.razorpay</groupId>
			<artifactId>razorpay-java</artifactId>
			<version>1.4.3</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>







































































THIS IS THE API WHICH WILL TAKE THE LISTY OF PRODUCTID AND LIST OF QUANTITIES AND USER OI


CARTCONTROLLER CLASS :



   // API to add product to cart
//    @PostMapping("/add")
//    public List<Cart> addToCart(@RequestParam List<Integer> productIds,
//                                @RequestParam List<Integer> quantities,
//                                @RequestParam Integer userId) {
//        List<Cart> cartItems = new ArrayList<>();
//
//        // Check if the user exists
//        Optional<UserRegister> userOptional = userRegisterRepo.findById(userId);
//        if (!userOptional.isPresent()) {
//            throw new RuntimeException("User not found with ID: " + userId);
//        }
//
//        for (int i = 0; i < productIds.size(); i++) {
//            Integer productId = productIds.get(i);
//            Integer quantity = quantities.get(i);
//
//            Optional<Products> productOptional = productRepository.findById(productId);
//            if (!productOptional.isPresent()) {
//                throw new RuntimeException("Product not found with ID: " + productId);
//            }
//
//            Products product = productOptional.get();
//
//            // Create a new cart item for each product
//            Cart cart = new Cart();
//            cart.setProduct(product);
//            cart.setQuantity(quantity);
//            cart.setUserId(userId);
//            cart.setPrice(product.getPrice().longValue()); // Set individual product price
//            cart.setTotalPrice(cart.getPrice() * quantity);
//            cartItems.add(cartRepository.save(cart));
//        }
//
//        return cartItems;
//    }




CARTSERVICES CLASS :


//    public List<Cart> addToCart(List<Integer> productIds, List<Integer> quantities, Integer userId) {
//        List<Cart> cartItems = new ArrayList<>();
//
//        // Check if the user exists
//        Optional<UserRegister> userOptional = userRegisterRepo.findById(userId);
//        if (!userOptional.isPresent()) {
//            throw new RuntimeException("User not found with ID: " + userId);
//        }
//
//        for (int i = 0; i < productIds.size(); i++) {
//            Integer productId = productIds.get(i);
//            Integer quantity = quantities.get(i);
//
//            Optional<Products> productOptional = productRepository.findById(productId);
//            if (!productOptional.isPresent()) {
//                throw new RuntimeException("Product not found with ID: " + productId);
//            }
//
//            // Create a new cart item for each product
//            Cart cart = new Cart();
//            cart.setProduct(productOptional.get());
//            cart.setQuantity(quantity);
//            cart.setUserId(userId);
//            cartItems.add(cartRepository.save(cart));
//        }
//
//        return cartItems;
//    }

