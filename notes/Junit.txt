JUNIT TESTING -
	
UNIT TEST -
a unit test is a way to test the smallest parts of your code such as individual methods to ensure they work as expected...


WHAT IS JUNIT?
A) JUnit is a testing framework for Java programming language, primarily used to write and run unit tests.Unit testing is a software testing method where individual units or components of the software are tested in isolation to ensure they work as expected.



KEY FEATURES OF JUNIT:
* Annotations to identify test methods (@Test, @BeforeEach, @AfterEach, etc.)
* Assertions to check expected vs actual results (assertEquals, assertTrue, etc.)
* Test Runners to execute tests and report results
Example :
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
class CalculatorTest {

    @Test
    void testAddition() {
        Calculator calculator = new Calculator();
        assertEquals(5, calculator.add(2, 3)); // Passes if 2 + 3 == 5
    }
}



BETWEEN JUNIT 4 AND JUNIT 5:

Feature	                                    JUnit 4	                                         JUnit 5 (a.k.a. JUnit Jupiter)
Release Year	                              2006	                                              2017
Architecture	               Single monolithic jar	                              Modular: junit-jupiter-api, junit-platform-engine, etc.
Annotations	                @Before, @After, @BeforeClass, @AfterClass, @Test	           @BeforeEach, @AfterEach, @BeforeAll, @AfterAll, @Test
Parameter Injection             	Not supported	                                        Supported (e.g., @ParameterizedTest, @ValueSource)
Dynamic Tests	                     Not supported	                                          Supported via @TestFactory
Extension Model	               Uses @RunWith and custom Runners	Uses                         @ExtendWith, more flexible and powerful
Assertions and Assumptions	               Basic	                                          More expressive assertions and assumptions
Tagging Tests                       	Not supported	                                            Supported via @Tag
Compatibility	                     Not compatible with JUnit 5	                         Can run JUnit 4 tests using junit-vintage-engine




PARAMETERIZED INJECTION -
Parameterized injection (in the context of JUnit testing) means passing different sets of input values into the same test method so that it runs multiple times with different data.
This is useful when you want to test a method with a variety of inputs without writing separate test methods for each case.
Example :
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
class EvenNumberTest {

    @ParameterizedTest
    @ValueSource(ints = {2, 4, 6, 8})
    void testIsEven(int number) {
        assertTrue(number % 2 == 0);
    }
}




THE MOST COMMONLY USED ANNOTATIONS:
* @Test: Marks a method as a test.
Example :
@Test
void additionShouldWork() {
    assertEquals(5, 2 + 3);
}
* @BeforeEach: Runs before each test method. Commonly used to set up test data. 
Example :
@BeforeEach
void setup() {
    calculator = new Calculator();
}

* @AfterEach: Runs after each test method. Used to clean up.
Example :
@AfterEach
void tearDown() {
    calculator = null;
}

* @BeforeAll: Runs once before all tests (static).
Example :

* @AfterAll: Runs once after all tests (static).
Example :

* @Disabled: Temporarily disables a test or temporarily skips a test method or class
Example :
@Disabled("Not implemented yet")
@Test
void testFutureFeature() {
    // this test will be skipped
}

* @DisplayName: Adds a custom name to tests for better readability in reports.
Example :
@DisplayName("Test for addition method")
@Test
void testAddition() {
    assertEquals(10, 5 + 5);
}

* @ParameterizedTest : Runs the same test multiple times with different inputs.
Example :
@ParameterizedTest
@ValueSource(ints = {1, 2, 3})
void testIsPositive(int number) {
    assertTrue(number > 0);
}

* @ValueSource : ➤ Used to provide a single column of primitive or string values to a parameterized test.
 Supported types: int, long, double, short, byte, char, boolean, String
 Example :
 @ParameterizedTest
@ValueSource(ints = {1, 2, 3, 4})
void testIsEven(int number) {
    assertTrue(number > 0);
}
💡 The test method will run 4 times with inputs: 1, 2, 3, and 4.

* @CsvSource : ➤ Used when you want to pass multiple arguments to your test method.
Each CSV line is split into parameters.
You can use quoteCharacters for strings with commas.
🧪 Example:
@ParameterizedTest
@CsvSource({
    "2, 3, 5",
    "1, 4, 5",
    "10, 15, 25"
})
void testAddition(int a, int b, int expected) {
    assertEquals(expected, a + b);
}
💡 The test runs 3 times with the respective pairs of a and b.

* @MethodSource : @MethodSource is a JUnit 5 annotation that allows you to provide test data from a separate method.
Instead of hardcoding input values in the test (like @ValueSource or @CsvSource), you write a method that returns test data — and JUnit will use that data to run the test multiple times.
WHY USE @METHODSOURCE?
When test inputs are dynamic, complex, or reused
When you need to test with multiple values or objects
Example :
@ParameterizedTest
@MethodSource("numberProvider")
void testIsPositive(int number) {
    assertTrue(number > 0);
}

static Stream<Integer> numberProvider() {
    return Stream.of(1, 2, 3, 4, 5);
}
EXPLANATION:
The numberProvider() method returns a list of numbers.
The test method runs once for each number.
JUnit injects the value into number.
Example2 :
@ParameterizedTest
@MethodSource("additionProvider")
void testAddition(int a, int b, int result) {
    assertEquals(result, a + b);
}
static Stream<Arguments> additionProvider() {
    return Stream.of(
        Arguments.of(2, 3, 5),
        Arguments.of(4, 1, 5),
        Arguments.of(7, 2, 9)
    );
}

* @CsvFileSource : ➤ Reads test data from a CSV file for @ParameterizedTest.
🔹 Use When:
You want to run tests using external CSV data (good for large datasets).
🧪 Example:
📄 data.csv (place in src/test/resources/):
2,3,5
1,4,5
6,4,10
🧪 Test Class:
@ParameterizedTest
@CsvFileSource(resources = "/data.csv")
void testAdditionFromFile(int a, int b, int expected) {
    assertEquals(expected, a + b);
}


* @EnumSource : ➤ Used to pass enum constants into a parameterized test.
🧪 Example:
enum Day { MONDAY, TUESDAY, WEDNESDAY }

@ParameterizedTest
@EnumSource(Day.class)
void testEnumValues(Day day) {
    assertNotNull(day);
}


* @RepeatedTest : ➤ Repeats a test method N times.
🧪 Example:
@RepeatedTest(3)
void repeatedTestExample(RepetitionInfo repetitionInfo) {
    System.out.println("Running repetition " + repetitionInfo.getCurrentRepetition());
}

* @Timeout : ➤ Fails the test if it takes longer than specified time.
🧪 Example:
@Test
@Timeout(2) // seconds
void timeoutTest() throws InterruptedException {
    Thread.sleep(1000); // Passes
}

* @ExtendWith : ➤ Used to register JUnit 5 extensions, like Spring, Mockito, or custom ones.
🧪 Example:
@ExtendWith(MockitoExtension.class)
class MyServiceTest {

    @Mock
    private MyRepository repository;

    @InjectMocks
    private MyService service;
    
    @Test
    void testSomething() {
        // test with mock
    }
}

* @Tag – Label your tests 
@Tag lets you group or label your tests with names like "unit", "integration", "slow", etc.
You can run specific groups of tests using tools like Maven, Gradle, or IntelliJ.
 WHY USE IT?
To separate fast and slow tests
To run only critical tests in CI/CD
To organize large test suites
Example : 
@Tag("unit")
@Test
void testAddition() {
    assertEquals(5, 2 + 3);
}

@Tag("integration")
@Test
void testDatabaseConnection() {
    // Simulate DB connection test
}
HOW TO RUN ONLY @TAG("UNIT") TESTS?
▶ In Maven (in pom.xml):
<properties>
    <groups>unit</groups>
</properties>
▶ In IntelliJ:
Right-click > Run tests with tag: unit

* Nested – Group related tests inside classes
🧠 WHAT IT IS:
@Nested lets you write sub-groups of test cases inside an outer test class. It helps organize tests logically.
Example :
class CalculatorTest {

    @Nested
    class AddTests {
        @Test
        void testAddPositiveNumbers() {
            assertEquals(5, 2 + 3);
        }

        @Test
        void testAddNegativeNumbers() {
            assertEquals(-5, -2 + -3);
        }
    }

    @Nested
    class SubtractTests {
        @Test
        void testSubtractPositiveNumbers() {
            assertEquals(1, 3 - 2);
        }

        @Test
        void testSubtractNegativeNumbers() {
            assertEquals(-1, -3 - -2);
        }
    }
}


WHAT ARE ASSERTIONS?
Assertions are methods used in tests to check if a condition is true or false. If an assertion fails, the test fails.
They help you verify the expected behavior of your code.
Most Common Assertions in JUnit 5
Method                                                      	Description
assertEquals(expected, actual)                      Checks if two values are equal
assertNotEquals(expected, actual)	               Checks if two values are NOT equal
assertTrue(condition)	                           Checks if the condition is true
assertFalse(condition)	                           Checks if the condition is false
assertNull(object)	                               Passes if object is null
assertNotNull(object)	                           Passes if object is NOT null
assertThrows()	                                   Expects an exception to be thrown
assertAll()	                                    Groups multiple assertions and runs all
assertArrayEquals()                             	Compares arrays
assertIterableEquals()                          	Compares iterables like Lists
assertSame(a, b)	                              Passes if a == b (same reference)
assertNotSame(a, b)                             	Passes if a != b
fail()	                                          Forces a test failure



STRUCTURE OF JUNIT TESTING :
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class) // ✅ Enables Mockito annotations
public class UserServiceTest {

    @Mock                      // ✅ Create a mock object of UserRepository
    private UserRepository repository;

    @InjectMocks               // ✅ Inject the mock into UserService
    private UserService service;

    @Test
    void testGetUserName() {
        // Arrange
        when(repository.findById(1)).thenReturn(new User("John"));

        // Act
        String name = service.getUserName(1);

        // Assert
        assertEquals("John", name);
        verify(repository).findById(1); // ✅ Verifies that the method was called
    }
}


WHY USE MOCKS?
🧠 1. Isolate the unit being tested
You want to test just one class or method, not its dependencies.
Real dependencies may:
Access a database
Call APIs
Depend on external services
👉 These make tests slow, fragile, or hard to set up.
⚡ 2. Make tests fast and reliable
Mocked dependencies don't hit the real DB/API.
They return controlled, predefined results.
👉 This makes tests fast, predictable, and easy to debug.

SIMPLE EXAMPLE: 
Without Mock vs With Mock
❌ Without Mock:
@Test
void testService() {
    UserRepository repo = new RealDbRepo(); // Hits actual DB 😱
    UserService service = new UserService(repo);
    ...
}
✅ With Mock:
@Mock
UserRepository repo;
@InjectMocks
UserService service;
@Test
void testServiceWithMock() {
    when(repo.findById(1)).thenReturn(new User("Alex")); // Simulate DB

    String name = service.getUserName(1);

    assertEquals("Alex", name);
    verify(repo).findById(1); // Check interaction
}




MOKITO ANNOTATION :

1. @Mock
👉 What it does:
Creates a mock object of a class or interface. It replaces the real object with a fake version for testing.
✅ Use When:
You want to isolate your test from real dependencies like DB, APIs, services.
🧪 Example:
@Mock
UserRepository userRepository;
@Test
void testMocking() {
    when(userRepository.findById(1)).thenReturn(new User("John"));
    assertEquals("John", userRepository.findById(1).getName());
}

✅ 2. @InjectMocks
👉 What it does:
Creates an instance of the class under test, and injects the mocks into it.
✅ Use When:
You want to test a class with dependencies and want those dependencies to be mocked automatically.
🧪 Example:
@Mock
UserRepository userRepository;
@InjectMocks
UserService userService;
@Test
void testGetUserName() {
    when(userRepository.findById(1)).thenReturn(new User("Alice"));
    assertEquals("Alice", userService.getUserName(1));
}
🔁 Equivalent to manually doing:
UserService userService = new UserService(userRepository);

✅ 3. @Spy
👉 What it does:
Creates a partial mock – real object is used, but you can override specific methods.
✅ Use When:
You want to test a real object but still mock or verify some of its behavior.
🧪 Example:
@Spy
List<String> spyList = new ArrayList<>();
@Test
void testSpy() {
    spyList.add("Java");
    spyList.add("Mockito");

    verify(spyList).add("Java");
    assertEquals(2, spyList.size()); // real method is called
}
🔸 Spies are best used with caution — for complex or legacy objects.

✅ 4. @Captor
👉 What it does:
Creates an ArgumentCaptor — used to capture arguments passed to mock methods.
✅ Use When:
You want to verify what exact values were passed to a method on the mock.
🧪 Example:
@Mock
UserRepository userRepository;
@InjectMocks
UserService userService;
@Captor
ArgumentCaptor<Integer> idCaptor;
@Test
void testCaptor() {
    when(userRepository.findById(anyInt())).thenReturn(new User("Bob"));

    userService.getUserName(42);

    verify(userRepository).findById(idCaptor.capture());
    assertEquals(42, idCaptor.getValue());
}



